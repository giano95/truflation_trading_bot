{
  "address": "0xB61d1aA7E1c888605033C0896473287D159Bc00c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract LinkTokenInterface",
          "name": "_link",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_registrar",
          "type": "address"
        },
        {
          "internalType": "contract AutomationRegistryInterface",
          "name": "_registry",
          "type": "address"
        },
        {
          "internalType": "contract ISwapRouter",
          "name": "_swapRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stakedToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tradedToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AutoApproveDisabled",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentTimeStamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastTimeStamp",
          "type": "uint256"
        }
      ],
      "name": "UpkeepNotNeeded",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "checkData",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "counterToDcaBot",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "orderInterval",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "orderSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastTimeStamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "counter",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxNumberOfOrders",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "counterToUpkeepID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "orderInterval",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "orderSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxNumberOfOrders",
          "type": "uint256"
        }
      ],
      "name": "createNewInstance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeTier",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_link",
      "outputs": [
        {
          "internalType": "contract LinkTokenInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_registry",
      "outputs": [
        {
          "internalType": "contract AutomationRegistryInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_stakedToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_swapRouter",
      "outputs": [
        {
          "internalType": "contract ISwapRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_tradedToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint32",
          "name": "gasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint96",
          "name": "fundingAmount",
          "type": "uint96"
        },
        {
          "internalType": "uint256",
          "name": "orderInterval",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "orderSize",
          "type": "uint256"
        }
      ],
      "name": "registerAndPredictID",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registrar",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestConsumerSentimentData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "consumerSentiment",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestInflationData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "yoyInflation",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "stakingAmount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakingBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tradingBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc6bff7237129251d9f35c86e9d561652daec80ff585898a55ea3e309da700639",
  "receipt": {
    "to": null,
    "from": "0x81617079A419ab4562b29A92181402BdF389a1fA",
    "contractAddress": "0xB61d1aA7E1c888605033C0896473287D159Bc00c",
    "transactionIndex": 19,
    "gasUsed": "2629517",
    "logsBloom": "0x
    "blockHash": "0x23dc8e3882c5f70a28b95fd5063b07e71f8fc5921537ed7b0e9f045d9e4ae404",
    "transactionHash": "0xc6bff7237129251d9f35c86e9d561652daec80ff585898a55ea3e309da700639",
    "logs": [],
    "blockNumber": 7879174,
    "cumulativeGasUsed": "5812621",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x326C977E6efc84E512bB9C30f76E30c160eD06FB",
    "0x9806cf6fBc89aBF286e8140C42174B94836e36F2",
    "0x02777053d6764996e594c3E88AF1D58D5363a2e6",
    "0xE592427A0AEce92De3Edee1F18E0157C05861564",
    "0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6",
    "0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984"
  ],
  "numDeployments": 2,
  "solcInputHash": "c4580d5cf3216514d16dcc8f68897c05",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract LinkTokenInterface\",\"name\":\"_link\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_registrar\",\"type\":\"address\"},{\"internalType\":\"contract AutomationRegistryInterface\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"contract ISwapRouter\",\"name\":\"_swapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tradedToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AutoApproveDisabled\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTimeStamp\",\"type\":\"uint256\"}],\"name\":\"UpkeepNotNeeded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"checkData\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"counterToDcaBot\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"orderInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"counter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxNumberOfOrders\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"counterToUpkeepID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"orderInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxNumberOfOrders\",\"type\":\"uint256\"}],\"name\":\"createNewInstance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTier\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_link\",\"outputs\":[{\"internalType\":\"contract LinkTokenInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_registry\",\"outputs\":[{\"internalType\":\"contract AutomationRegistryInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_stakedToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_tradedToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"gasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"fundingAmount\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"orderInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderSize\",\"type\":\"uint256\"}],\"name\":\"registerAndPredictID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registrar\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestConsumerSentimentData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"consumerSentiment\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestInflationData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"yoyInflation\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakingAmount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TradingBotV2.sol\":\"TradingBotV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/Chainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {CBORChainlink} from \\\"./vendor/CBORChainlink.sol\\\";\\nimport {BufferChainlink} from \\\"./vendor/BufferChainlink.sol\\\";\\n\\n/**\\n * @title Library for common Chainlink functions\\n * @dev Uses imported CBOR library for encoding to buffer\\n */\\nlibrary Chainlink {\\n  uint256 internal constant defaultBufferSize = 256; // solhint-disable-line const-name-snakecase\\n\\n  using CBORChainlink for BufferChainlink.buffer;\\n\\n  struct Request {\\n    bytes32 id;\\n    address callbackAddress;\\n    bytes4 callbackFunctionId;\\n    uint256 nonce;\\n    BufferChainlink.buffer buf;\\n  }\\n\\n  /**\\n   * @notice Initializes a Chainlink request\\n   * @dev Sets the ID, callback address, and callback function signature on the request\\n   * @param self The uninitialized request\\n   * @param jobId The Job Specification ID\\n   * @param callbackAddr The callback address\\n   * @param callbackFunc The callback function signature\\n   * @return The initialized request\\n   */\\n  function initialize(\\n    Request memory self,\\n    bytes32 jobId,\\n    address callbackAddr,\\n    bytes4 callbackFunc\\n  ) internal pure returns (Chainlink.Request memory) {\\n    BufferChainlink.init(self.buf, defaultBufferSize);\\n    self.id = jobId;\\n    self.callbackAddress = callbackAddr;\\n    self.callbackFunctionId = callbackFunc;\\n    return self;\\n  }\\n\\n  /**\\n   * @notice Sets the data for the buffer without encoding CBOR on-chain\\n   * @dev CBOR can be closed with curly-brackets {} or they can be left off\\n   * @param self The initialized request\\n   * @param data The CBOR data\\n   */\\n  function setBuffer(Request memory self, bytes memory data) internal pure {\\n    BufferChainlink.init(self.buf, data.length);\\n    BufferChainlink.append(self.buf, data);\\n  }\\n\\n  /**\\n   * @notice Adds a string value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The string value to add\\n   */\\n  function add(\\n    Request memory self,\\n    string memory key,\\n    string memory value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeString(value);\\n  }\\n\\n  /**\\n   * @notice Adds a bytes value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The bytes value to add\\n   */\\n  function addBytes(\\n    Request memory self,\\n    string memory key,\\n    bytes memory value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeBytes(value);\\n  }\\n\\n  /**\\n   * @notice Adds a int256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The int256 value to add\\n   */\\n  function addInt(\\n    Request memory self,\\n    string memory key,\\n    int256 value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeInt(value);\\n  }\\n\\n  /**\\n   * @notice Adds a uint256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The uint256 value to add\\n   */\\n  function addUint(\\n    Request memory self,\\n    string memory key,\\n    uint256 value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeUInt(value);\\n  }\\n\\n  /**\\n   * @notice Adds an array of strings to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param values The array of string values to add\\n   */\\n  function addStringArray(\\n    Request memory self,\\n    string memory key,\\n    string[] memory values\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.startArray();\\n    for (uint256 i = 0; i < values.length; i++) {\\n      self.buf.encodeString(values[i]);\\n    }\\n    self.buf.endSequence();\\n  }\\n}\\n\",\"keccak256\":\"0x3e133ddc69d0909fbe338c34b70cbf8dd262c70fd670b3632424c1858de25105\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/ChainlinkClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Chainlink.sol\\\";\\nimport \\\"./interfaces/ENSInterface.sol\\\";\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"./interfaces/ChainlinkRequestInterface.sol\\\";\\nimport \\\"./interfaces/OperatorInterface.sol\\\";\\nimport \\\"./interfaces/PointerInterface.sol\\\";\\nimport {ENSResolver as ENSResolver_Chainlink} from \\\"./vendor/ENSResolver.sol\\\";\\n\\n/**\\n * @title The ChainlinkClient contract\\n * @notice Contract writers can inherit this contract in order to create requests for the\\n * Chainlink network\\n */\\nabstract contract ChainlinkClient {\\n  using Chainlink for Chainlink.Request;\\n\\n  uint256 internal constant LINK_DIVISIBILITY = 10**18;\\n  uint256 private constant AMOUNT_OVERRIDE = 0;\\n  address private constant SENDER_OVERRIDE = address(0);\\n  uint256 private constant ORACLE_ARGS_VERSION = 1;\\n  uint256 private constant OPERATOR_ARGS_VERSION = 2;\\n  bytes32 private constant ENS_TOKEN_SUBNAME = keccak256(\\\"link\\\");\\n  bytes32 private constant ENS_ORACLE_SUBNAME = keccak256(\\\"oracle\\\");\\n  address private constant LINK_TOKEN_POINTER = 0xC89bD4E1632D3A43CB03AAAd5262cbe4038Bc571;\\n\\n  ENSInterface private s_ens;\\n  bytes32 private s_ensNode;\\n  LinkTokenInterface private s_link;\\n  OperatorInterface private s_oracle;\\n  uint256 private s_requestCount = 1;\\n  mapping(bytes32 => address) private s_pendingRequests;\\n\\n  event ChainlinkRequested(bytes32 indexed id);\\n  event ChainlinkFulfilled(bytes32 indexed id);\\n  event ChainlinkCancelled(bytes32 indexed id);\\n\\n  /**\\n   * @notice Creates a request that can hold additional parameters\\n   * @param specId The Job Specification ID that the request will be created for\\n   * @param callbackAddr address to operate the callback on\\n   * @param callbackFunctionSignature function signature to use for the callback\\n   * @return A Chainlink Request struct in memory\\n   */\\n  function buildChainlinkRequest(\\n    bytes32 specId,\\n    address callbackAddr,\\n    bytes4 callbackFunctionSignature\\n  ) internal pure returns (Chainlink.Request memory) {\\n    Chainlink.Request memory req;\\n    return req.initialize(specId, callbackAddr, callbackFunctionSignature);\\n  }\\n\\n  /**\\n   * @notice Creates a request that can hold additional parameters\\n   * @param specId The Job Specification ID that the request will be created for\\n   * @param callbackFunctionSignature function signature to use for the callback\\n   * @return A Chainlink Request struct in memory\\n   */\\n  function buildOperatorRequest(bytes32 specId, bytes4 callbackFunctionSignature)\\n    internal\\n    view\\n    returns (Chainlink.Request memory)\\n  {\\n    Chainlink.Request memory req;\\n    return req.initialize(specId, address(this), callbackFunctionSignature);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the stored oracle address\\n   * @dev Calls `chainlinkRequestTo` with the stored oracle address\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendChainlinkRequest(Chainlink.Request memory req, uint256 payment) internal returns (bytes32) {\\n    return sendChainlinkRequestTo(address(s_oracle), req, payment);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the specified oracle address\\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\\n   * send LINK which creates a request on the target oracle contract.\\n   * Emits ChainlinkRequested event.\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendChainlinkRequestTo(\\n    address oracleAddress,\\n    Chainlink.Request memory req,\\n    uint256 payment\\n  ) internal returns (bytes32 requestId) {\\n    uint256 nonce = s_requestCount;\\n    s_requestCount = nonce + 1;\\n    bytes memory encodedRequest = abi.encodeWithSelector(\\n      ChainlinkRequestInterface.oracleRequest.selector,\\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\\n      req.id,\\n      address(this),\\n      req.callbackFunctionId,\\n      nonce,\\n      ORACLE_ARGS_VERSION,\\n      req.buf.buf\\n    );\\n    return _rawRequest(oracleAddress, nonce, payment, encodedRequest);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the stored oracle address\\n   * @dev This function supports multi-word response\\n   * @dev Calls `sendOperatorRequestTo` with the stored oracle address\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendOperatorRequest(Chainlink.Request memory req, uint256 payment) internal returns (bytes32) {\\n    return sendOperatorRequestTo(address(s_oracle), req, payment);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the specified oracle address\\n   * @dev This function supports multi-word response\\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\\n   * send LINK which creates a request on the target oracle contract.\\n   * Emits ChainlinkRequested event.\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendOperatorRequestTo(\\n    address oracleAddress,\\n    Chainlink.Request memory req,\\n    uint256 payment\\n  ) internal returns (bytes32 requestId) {\\n    uint256 nonce = s_requestCount;\\n    s_requestCount = nonce + 1;\\n    bytes memory encodedRequest = abi.encodeWithSelector(\\n      OperatorInterface.operatorRequest.selector,\\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\\n      req.id,\\n      req.callbackFunctionId,\\n      nonce,\\n      OPERATOR_ARGS_VERSION,\\n      req.buf.buf\\n    );\\n    return _rawRequest(oracleAddress, nonce, payment, encodedRequest);\\n  }\\n\\n  /**\\n   * @notice Make a request to an oracle\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param nonce used to generate the request ID\\n   * @param payment The amount of LINK to send for the request\\n   * @param encodedRequest data encoded for request type specific format\\n   * @return requestId The request ID\\n   */\\n  function _rawRequest(\\n    address oracleAddress,\\n    uint256 nonce,\\n    uint256 payment,\\n    bytes memory encodedRequest\\n  ) private returns (bytes32 requestId) {\\n    requestId = keccak256(abi.encodePacked(this, nonce));\\n    s_pendingRequests[requestId] = oracleAddress;\\n    emit ChainlinkRequested(requestId);\\n    require(s_link.transferAndCall(oracleAddress, payment, encodedRequest), \\\"unable to transferAndCall to oracle\\\");\\n  }\\n\\n  /**\\n   * @notice Allows a request to be cancelled if it has not been fulfilled\\n   * @dev Requires keeping track of the expiration value emitted from the oracle contract.\\n   * Deletes the request from the `pendingRequests` mapping.\\n   * Emits ChainlinkCancelled event.\\n   * @param requestId The request ID\\n   * @param payment The amount of LINK sent for the request\\n   * @param callbackFunc The callback function specified for the request\\n   * @param expiration The time of the expiration for the request\\n   */\\n  function cancelChainlinkRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunc,\\n    uint256 expiration\\n  ) internal {\\n    OperatorInterface requested = OperatorInterface(s_pendingRequests[requestId]);\\n    delete s_pendingRequests[requestId];\\n    emit ChainlinkCancelled(requestId);\\n    requested.cancelOracleRequest(requestId, payment, callbackFunc, expiration);\\n  }\\n\\n  /**\\n   * @notice the next request count to be used in generating a nonce\\n   * @dev starts at 1 in order to ensure consistent gas cost\\n   * @return returns the next request count to be used in a nonce\\n   */\\n  function getNextRequestCount() internal view returns (uint256) {\\n    return s_requestCount;\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle address\\n   * @param oracleAddress The address of the oracle contract\\n   */\\n  function setChainlinkOracle(address oracleAddress) internal {\\n    s_oracle = OperatorInterface(oracleAddress);\\n  }\\n\\n  /**\\n   * @notice Sets the LINK token address\\n   * @param linkAddress The address of the LINK token contract\\n   */\\n  function setChainlinkToken(address linkAddress) internal {\\n    s_link = LinkTokenInterface(linkAddress);\\n  }\\n\\n  /**\\n   * @notice Sets the Chainlink token address for the public\\n   * network as given by the Pointer contract\\n   */\\n  function setPublicChainlinkToken() internal {\\n    setChainlinkToken(PointerInterface(LINK_TOKEN_POINTER).getAddress());\\n  }\\n\\n  /**\\n   * @notice Retrieves the stored address of the LINK token\\n   * @return The address of the LINK token\\n   */\\n  function chainlinkTokenAddress() internal view returns (address) {\\n    return address(s_link);\\n  }\\n\\n  /**\\n   * @notice Retrieves the stored address of the oracle contract\\n   * @return The address of the oracle contract\\n   */\\n  function chainlinkOracleAddress() internal view returns (address) {\\n    return address(s_oracle);\\n  }\\n\\n  /**\\n   * @notice Allows for a request which was created on another contract to be fulfilled\\n   * on this contract\\n   * @param oracleAddress The address of the oracle contract that will fulfill the request\\n   * @param requestId The request ID used for the response\\n   */\\n  function addChainlinkExternalRequest(address oracleAddress, bytes32 requestId) internal notPendingRequest(requestId) {\\n    s_pendingRequests[requestId] = oracleAddress;\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle and LINK token contracts with the addresses resolved by ENS\\n   * @dev Accounts for subnodes having different resolvers\\n   * @param ensAddress The address of the ENS contract\\n   * @param node The ENS node hash\\n   */\\n  function useChainlinkWithENS(address ensAddress, bytes32 node) internal {\\n    s_ens = ENSInterface(ensAddress);\\n    s_ensNode = node;\\n    bytes32 linkSubnode = keccak256(abi.encodePacked(s_ensNode, ENS_TOKEN_SUBNAME));\\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(s_ens.resolver(linkSubnode));\\n    setChainlinkToken(resolver.addr(linkSubnode));\\n    updateChainlinkOracleWithENS();\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle contract with the address resolved by ENS\\n   * @dev This may be called on its own as long as `useChainlinkWithENS` has been called previously\\n   */\\n  function updateChainlinkOracleWithENS() internal {\\n    bytes32 oracleSubnode = keccak256(abi.encodePacked(s_ensNode, ENS_ORACLE_SUBNAME));\\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(s_ens.resolver(oracleSubnode));\\n    setChainlinkOracle(resolver.addr(oracleSubnode));\\n  }\\n\\n  /**\\n   * @notice Ensures that the fulfillment is valid for this contract\\n   * @dev Use if the contract developer prefers methods instead of modifiers for validation\\n   * @param requestId The request ID for fulfillment\\n   */\\n  function validateChainlinkCallback(bytes32 requestId)\\n    internal\\n    recordChainlinkFulfillment(requestId)\\n  // solhint-disable-next-line no-empty-blocks\\n  {\\n\\n  }\\n\\n  /**\\n   * @dev Reverts if the sender is not the oracle of the request.\\n   * Emits ChainlinkFulfilled event.\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier recordChainlinkFulfillment(bytes32 requestId) {\\n    require(msg.sender == s_pendingRequests[requestId], \\\"Source must be the oracle of the request\\\");\\n    delete s_pendingRequests[requestId];\\n    emit ChainlinkFulfilled(requestId);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Reverts if the request is already pending\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier notPendingRequest(bytes32 requestId) {\\n    require(s_pendingRequests[requestId] == address(0), \\\"Request is already pending\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xa221ccfa4763977cc78c57e3a83d47f5aaf7c15535a2c20dba5f46af80fb3bd7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface1_2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @notice config of the registry\\n * @dev only used in params and return values\\n * @member paymentPremiumPPB payment premium rate oracles receive on top of\\n * being reimbursed for gas, measured in parts per billion\\n * @member flatFeeMicroLink flat fee paid to oracles for performing upkeeps,\\n * priced in MicroLink; can be used in conjunction with or independently of\\n * paymentPremiumPPB\\n * @member blockCountPerTurn number of blocks each oracle has during their turn to\\n * perform upkeep before it will be the next keeper's turn to submit\\n * @member checkGasLimit gas limit when checking for upkeep\\n * @member stalenessSeconds number of seconds that is allowed for feed data to\\n * be stale before switching to the fallback pricing\\n * @member gasCeilingMultiplier multiplier to apply to the fast gas feed price\\n * when calculating the payment ceiling for keepers\\n * @member minUpkeepSpend minimum LINK that an upkeep must spend before cancelling\\n * @member maxPerformGas max executeGas allowed for an upkeep on this registry\\n * @member fallbackGasPrice gas price used if the gas price feed is stale\\n * @member fallbackLinkPrice LINK price used if the LINK price feed is stale\\n * @member transcoder address of the transcoder contract\\n * @member registrar address of the registrar contract\\n */\\nstruct Config {\\n  uint32 paymentPremiumPPB;\\n  uint32 flatFeeMicroLink; // min 0.000001 LINK, max 4294 LINK\\n  uint24 blockCountPerTurn;\\n  uint32 checkGasLimit;\\n  uint24 stalenessSeconds;\\n  uint16 gasCeilingMultiplier;\\n  uint96 minUpkeepSpend;\\n  uint32 maxPerformGas;\\n  uint256 fallbackGasPrice;\\n  uint256 fallbackLinkPrice;\\n  address transcoder;\\n  address registrar;\\n}\\n\\n/**\\n * @notice state of the registry\\n * @dev only used in params and return values\\n * @member nonce used for ID generation\\n * @member ownerLinkBalance withdrawable balance of LINK by contract owner\\n * @member expectedLinkBalance the expected balance of LINK of the registry\\n * @member numUpkeeps total number of upkeeps on the registry\\n */\\nstruct State {\\n  uint32 nonce;\\n  uint96 ownerLinkBalance;\\n  uint256 expectedLinkBalance;\\n  uint256 numUpkeeps;\\n}\\n\\ninterface AutomationRegistryBaseInterface {\\n  function registerUpkeep(\\n    address target,\\n    uint32 gasLimit,\\n    address admin,\\n    bytes calldata checkData\\n  ) external returns (uint256 id);\\n\\n  function performUpkeep(uint256 id, bytes calldata performData) external returns (bool success);\\n\\n  function cancelUpkeep(uint256 id) external;\\n\\n  function addFunds(uint256 id, uint96 amount) external;\\n\\n  function setUpkeepGasLimit(uint256 id, uint32 gasLimit) external;\\n\\n  function getUpkeep(uint256 id)\\n    external\\n    view\\n    returns (\\n      address target,\\n      uint32 executeGas,\\n      bytes memory checkData,\\n      uint96 balance,\\n      address lastKeeper,\\n      address admin,\\n      uint64 maxValidBlocknumber,\\n      uint96 amountSpent\\n    );\\n\\n  function getActiveUpkeepIDs(uint256 startIndex, uint256 maxCount) external view returns (uint256[] memory);\\n\\n  function getKeeperInfo(address query)\\n    external\\n    view\\n    returns (\\n      address payee,\\n      bool active,\\n      uint96 balance\\n    );\\n\\n  function getState()\\n    external\\n    view\\n    returns (\\n      State memory,\\n      Config memory,\\n      address[] memory\\n    );\\n}\\n\\n/**\\n * @dev The view methods are not actually marked as view in the implementation\\n * but we want them to be easily queried off-chain. Solidity will not compile\\n * if we actually inherit from this interface, so we document it here.\\n */\\ninterface AutomationRegistryInterface is AutomationRegistryBaseInterface {\\n  function checkUpkeep(uint256 upkeepId, address from)\\n    external\\n    view\\n    returns (\\n      bytes memory performData,\\n      uint256 maxLinkPayment,\\n      uint256 gasLimit,\\n      int256 gasWei,\\n      int256 linkEth\\n    );\\n}\\n\\ninterface AutomationRegistryExecutableInterface is AutomationRegistryBaseInterface {\\n  function checkUpkeep(uint256 upkeepId, address from)\\n    external\\n    returns (\\n      bytes memory performData,\\n      uint256 maxLinkPayment,\\n      uint256 gasLimit,\\n      uint256 adjustedGasWei,\\n      uint256 linkEth\\n    );\\n}\\n\",\"keccak256\":\"0xc61d747194f2efd476204f9cf138f4028166d4723960fd66c7d316625ebe3ff6\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/ChainlinkRequestInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ChainlinkRequestInterface {\\n  function oracleRequest(\\n    address sender,\\n    uint256 requestPrice,\\n    bytes32 serviceAgreementID,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion,\\n    bytes calldata data\\n  ) external;\\n\\n  function cancelOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration\\n  ) external;\\n}\\n\",\"keccak256\":\"0xa8adfbd0326c982c38ea3808a4da52f0a51807241787c4bd28235bbe86707c04\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/ENSInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ENSInterface {\\n  // Logged when the owner of a node assigns a new owner to a subnode.\\n  event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n  // Logged when the owner of a node transfers ownership to a new account.\\n  event Transfer(bytes32 indexed node, address owner);\\n\\n  // Logged when the resolver for a node changes.\\n  event NewResolver(bytes32 indexed node, address resolver);\\n\\n  // Logged when the TTL of a node changes\\n  event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n  function setSubnodeOwner(\\n    bytes32 node,\\n    bytes32 label,\\n    address owner\\n  ) external;\\n\\n  function setResolver(bytes32 node, address resolver) external;\\n\\n  function setOwner(bytes32 node, address owner) external;\\n\\n  function setTTL(bytes32 node, uint64 ttl) external;\\n\\n  function owner(bytes32 node) external view returns (address);\\n\\n  function resolver(bytes32 node) external view returns (address);\\n\\n  function ttl(bytes32 node) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xe51365458d82233a55f5ad4492a3b6bf56332d21cad6b0a5f21b8a026fcfd6d0\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xc7d7cd730d36825485ef4107d93c3ff18b9f3a5a00ea3d5988ba9a0bd70b10c5\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OperatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OracleInterface.sol\\\";\\nimport \\\"./ChainlinkRequestInterface.sol\\\";\\n\\ninterface OperatorInterface is OracleInterface, ChainlinkRequestInterface {\\n  function operatorRequest(\\n    address sender,\\n    uint256 payment,\\n    bytes32 specId,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion,\\n    bytes calldata data\\n  ) external;\\n\\n  function fulfillOracleRequest2(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes calldata data\\n  ) external returns (bool);\\n\\n  function ownerTransferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function distributeFunds(address payable[] calldata receivers, uint256[] calldata amounts) external payable;\\n\\n  function getAuthorizedSenders() external returns (address[] memory);\\n\\n  function setAuthorizedSenders(address[] calldata senders) external;\\n\\n  function getForwarder() external returns (address);\\n}\\n\",\"keccak256\":\"0x79a7c77b8f87be6ef02a566765077ed599724b060a209f34f8907eec5615da68\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OracleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface OracleInterface {\\n  function fulfillOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes32 data\\n  ) external returns (bool);\\n\\n  function isAuthorizedSender(address node) external view returns (bool);\\n\\n  function withdraw(address recipient, uint256 amount) external;\\n\\n  function withdrawable() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3a86242e005bad9daf1b4794399a81ba373069355f38c8a07b58e57abc32513a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/PointerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface PointerInterface {\\n  function getAddress() external view returns (address);\\n}\\n\",\"keccak256\":\"0x42e5d62984f9d57bab7e32b2c6e3af86f4feb232ea2af6c822032fae88203bd7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/BufferChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev A library for working with mutable byte buffers in Solidity.\\n *\\n * Byte buffers are mutable and expandable, and provide a variety of primitives\\n * for writing to them. At any time you can fetch a bytes object containing the\\n * current contents of the buffer. The bytes object should not be stored between\\n * operations, as it may change due to resizing of the buffer.\\n */\\nlibrary BufferChainlink {\\n  /**\\n   * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n   *      a capacity. The capacity may be longer than the current value, in\\n   *      which case it can be extended without the need to allocate more memory.\\n   */\\n  struct buffer {\\n    bytes buf;\\n    uint256 capacity;\\n  }\\n\\n  /**\\n   * @dev Initializes a buffer with an initial capacity.\\n   * @param buf The buffer to initialize.\\n   * @param capacity The number of bytes of space to allocate the buffer.\\n   * @return The buffer, for chaining.\\n   */\\n  function init(buffer memory buf, uint256 capacity) internal pure returns (buffer memory) {\\n    if (capacity % 32 != 0) {\\n      capacity += 32 - (capacity % 32);\\n    }\\n    // Allocate space for the buffer data\\n    buf.capacity = capacity;\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(buf, ptr)\\n      mstore(ptr, 0)\\n      mstore(0x40, add(32, add(ptr, capacity)))\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Initializes a new buffer from an existing bytes object.\\n   *      Changes to the buffer may mutate the original value.\\n   * @param b The bytes object to initialize the buffer with.\\n   * @return A new buffer.\\n   */\\n  function fromBytes(bytes memory b) internal pure returns (buffer memory) {\\n    buffer memory buf;\\n    buf.buf = b;\\n    buf.capacity = b.length;\\n    return buf;\\n  }\\n\\n  function resize(buffer memory buf, uint256 capacity) private pure {\\n    bytes memory oldbuf = buf.buf;\\n    init(buf, capacity);\\n    append(buf, oldbuf);\\n  }\\n\\n  function max(uint256 a, uint256 b) private pure returns (uint256) {\\n    if (a > b) {\\n      return a;\\n    }\\n    return b;\\n  }\\n\\n  /**\\n   * @dev Sets buffer length to 0.\\n   * @param buf The buffer to truncate.\\n   * @return The original buffer, for chaining..\\n   */\\n  function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n    assembly {\\n      let bufptr := mload(buf)\\n      mstore(bufptr, 0)\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The start offset to write to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    require(len <= data.length);\\n\\n    if (off + len > buf.capacity) {\\n      resize(buf, max(buf.capacity, len + off) * 2);\\n    }\\n\\n    uint256 dest;\\n    uint256 src;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Start address = buffer address + offset + sizeof(buffer length)\\n      dest := add(add(bufptr, 32), off)\\n      // Update buffer length if we're extending it\\n      if gt(add(len, off), buflen) {\\n        mstore(bufptr, add(len, off))\\n      }\\n      src := add(data, 32)\\n    }\\n\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    unchecked {\\n      uint256 mask = (256**(32 - len)) - 1;\\n      assembly {\\n        let srcpart := and(mload(src), not(mask))\\n        let destpart := and(mload(dest), mask)\\n        mstore(dest, or(destpart, srcpart))\\n      }\\n    }\\n\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(\\n    buffer memory buf,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, len);\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, data.length);\\n  }\\n\\n  /**\\n   * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write the byte at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeUint8(\\n    buffer memory buf,\\n    uint256 off,\\n    uint8 data\\n  ) internal pure returns (buffer memory) {\\n    if (off >= buf.capacity) {\\n      resize(buf, buf.capacity * 2);\\n    }\\n\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Address = buffer address + sizeof(buffer length) + off\\n      let dest := add(add(bufptr, off), 32)\\n      mstore8(dest, data)\\n      // Update buffer length if we extended it\\n      if eq(off, buflen) {\\n        mstore(bufptr, add(buflen, 1))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendUint8(buffer memory buf, uint8 data) internal pure returns (buffer memory) {\\n    return writeUint8(buf, buf.buf.length, data);\\n  }\\n\\n  /**\\n   * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\n   *      exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (left-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes32 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    unchecked {\\n      uint256 mask = (256**len) - 1;\\n      // Right-align data\\n      data = data >> (8 * (32 - len));\\n      assembly {\\n        // Memory address of the buffer data\\n        let bufptr := mload(buf)\\n        // Address = buffer address + sizeof(buffer length) + off + len\\n        let dest := add(add(bufptr, off), len)\\n        mstore(dest, or(and(mload(dest), not(mask)), data))\\n        // Update buffer length if we extended it\\n        if gt(add(off, len), mload(bufptr)) {\\n          mstore(bufptr, add(off, len))\\n        }\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeBytes20(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes20 data\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, off, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chhaining.\\n   */\\n  function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, 32);\\n  }\\n\\n  /**\\n   * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (right-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeInt(\\n    buffer memory buf,\\n    uint256 off,\\n    uint256 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint256 mask = (256**len) - 1;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + off + sizeof(buffer length) + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n   * exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer.\\n   */\\n  function appendInt(\\n    buffer memory buf,\\n    uint256 data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return writeInt(buf, buf.buf.length, data, len);\\n  }\\n}\\n\",\"keccak256\":\"0x89388a631c16ad993e4d76d8d19e08ae98e1397f5dfdfb5f9c0b91015df4cf5d\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/CBORChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.19;\\n\\nimport {BufferChainlink} from \\\"./BufferChainlink.sol\\\";\\n\\nlibrary CBORChainlink {\\n  using BufferChainlink for BufferChainlink.buffer;\\n\\n  uint8 private constant MAJOR_TYPE_INT = 0;\\n  uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n  uint8 private constant MAJOR_TYPE_BYTES = 2;\\n  uint8 private constant MAJOR_TYPE_STRING = 3;\\n  uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n  uint8 private constant MAJOR_TYPE_MAP = 5;\\n  uint8 private constant MAJOR_TYPE_TAG = 6;\\n  uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n  uint8 private constant TAG_TYPE_BIGNUM = 2;\\n  uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n  function encodeFixedNumeric(BufferChainlink.buffer memory buf, uint8 major, uint64 value) private pure {\\n    if(value <= 23) {\\n      buf.appendUint8(uint8((major << 5) | value));\\n    } else if (value <= 0xFF) {\\n      buf.appendUint8(uint8((major << 5) | 24));\\n      buf.appendInt(value, 1);\\n    } else if (value <= 0xFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 25));\\n      buf.appendInt(value, 2);\\n    } else if (value <= 0xFFFFFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 26));\\n      buf.appendInt(value, 4);\\n    } else {\\n      buf.appendUint8(uint8((major << 5) | 27));\\n      buf.appendInt(value, 8);\\n    }\\n  }\\n\\n  function encodeIndefiniteLengthType(BufferChainlink.buffer memory buf, uint8 major) private pure {\\n    buf.appendUint8(uint8((major << 5) | 31));\\n  }\\n\\n  function encodeUInt(BufferChainlink.buffer memory buf, uint value) internal pure {\\n    if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, value);\\n    } else {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n    }\\n  }\\n\\n  function encodeInt(BufferChainlink.buffer memory buf, int value) internal pure {\\n    if(value < -0x10000000000000000) {\\n      encodeSignedBigNum(buf, value);\\n    } else if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, uint(value));\\n    } else if(value >= 0) {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(uint256(value)));\\n    } else {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(uint256(-1 - value)));\\n    }\\n  }\\n\\n  function encodeBytes(BufferChainlink.buffer memory buf, bytes memory value) internal pure {\\n    encodeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n    buf.append(value);\\n  }\\n\\n  function encodeBigNum(BufferChainlink.buffer memory buf, uint value) internal pure {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n    encodeBytes(buf, abi.encode(value));\\n  }\\n\\n  function encodeSignedBigNum(BufferChainlink.buffer memory buf, int input) internal pure {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM));\\n    encodeBytes(buf, abi.encode(uint256(-1 - input)));\\n  }\\n\\n  function encodeString(BufferChainlink.buffer memory buf, string memory value) internal pure {\\n    encodeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n    buf.append(bytes(value));\\n  }\\n\\n  function startArray(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n  }\\n\\n  function startMap(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n  }\\n\\n  function endSequence(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n  }\\n}\\n\",\"keccak256\":\"0x08bda450d4dc1d17147fd29810234d35e2c437f1a99be733cfa7ee516db08a48\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/ENSResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract ENSResolver {\\n  function addr(bytes32 node) public view virtual returns (address);\\n}\\n\",\"keccak256\":\"0x606bda5f3fa27be4cf04f6636dda443b7787b56e87ade988fca2e51d2147613d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\",\"keccak256\":\"0x9af98b0908c96320ca6d08b22f0efca864742f6adbe5794cafe2d1d2e808b0cd\",\"license\":\"GPL-2.0-or-later\"},\"contracts/TradingBotV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// -- IMPORTS --\\nimport {AutomationRegistryInterface, State, Config} from '@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface1_2.sol';\\nimport {LinkTokenInterface} from '@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol';\\nimport '@openzeppelin/contracts/utils/Counters.sol'; // Just a simple contracts that keep counts of how many times it's called\\nimport '@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol';\\nimport '@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol';\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport '@chainlink/contracts/src/v0.8/ChainlinkClient.sol';\\n\\n// -- INTERFACES --\\ninterface KeeperRegistrarInterface {\\n    function register(\\n        string memory name,\\n        bytes calldata encryptedEmail,\\n        address upkeepContract,\\n        uint32 gasLimit,\\n        address adminAddress,\\n        bytes calldata checkData,\\n        uint96 amount,\\n        uint8 source,\\n        address sender\\n    ) external;\\n}\\n\\nstruct DcaBot {\\n    address owner;\\n    uint256 orderInterval; // interval in seconds in which the bot swap 'amount' DAI for WETH\\n    uint256 orderSize;\\n    uint256 lastTimeStamp;\\n    uint256 counter; // count how many times we trade\\n    uint256 maxNumberOfOrders;\\n}\\n\\n// -- CONTRACTS --\\ncontract TradingBotV2 is ReentrancyGuard {\\n    using Counters for Counters.Counter;\\n    using Chainlink for Chainlink.Request;\\n\\n    // -- CONSTANTS --\\n    // address public constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F; // MAINNET\\n    // address public constant WETH9 = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2; // MAINNET\\n    // address public constant UNI = 0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984; // MAINNET\\n    // address public constant WETH9 = 0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6; // GOERLI\\n    // address public constant UNI = 0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984; // GOERLI\\n\\n    uint24 public constant feeTier = 3000;\\n\\n    // -- VARIABLES --\\n    Counters.Counter private _counterIDCounter; // Counter ID\\n\\n    mapping(uint256 => DcaBot) public counterToDcaBot;\\n    mapping(uint256 => uint256) public counterToUpkeepID;\\n\\n    LinkTokenInterface public immutable i_link;\\n    address public immutable registrar;\\n    AutomationRegistryInterface public immutable i_registry;\\n    bytes4 registerSig = KeeperRegistrarInterface.register.selector;\\n\\n    ISwapRouter public immutable i_swapRouter;\\n    address public immutable i_stakedToken;\\n    address public immutable i_tradedToken;\\n    mapping(address => uint256) public stakingBalance;\\n    mapping(address => uint256) public tradingBalance;\\n\\n    // -- ERRORS --\\n    error UpkeepNotNeeded(uint256 currentTimeStamp, uint256 lastTimeStamp);\\n    error AutoApproveDisabled();\\n\\n    // -- CONSTRUCTOR --\\n    constructor(\\n        LinkTokenInterface _link,\\n        address _registrar,\\n        AutomationRegistryInterface _registry,\\n        ISwapRouter _swapRouter,\\n        address _stakedToken,\\n        address _tradedToken\\n    ) {\\n        // GOERLI: 0x326C977E6efc84E512bB9C30f76E30c160eD06FB\\n        i_link = _link;\\n        // GOERLI: 0x9806cf6fBc89aBF286e8140C42174B94836e36F2\\n        registrar = _registrar;\\n        // GOERLI: 0x02777053d6764996e594c3E88AF1D58D5363a2e6\\n        i_registry = _registry;\\n\\n        // Initialize Uniswap Router\\n        i_swapRouter = _swapRouter;\\n\\n        // Set Tokens addresses\\n        i_stakedToken = _stakedToken;\\n        i_tradedToken = _tradedToken;\\n    }\\n\\n    // -- METHODS --\\n    function createNewInstance(\\n        address owner,\\n        uint256 orderInterval,\\n        uint256 orderSize,\\n        uint256 maxNumberOfOrders\\n    ) public returns (uint256) {\\n        uint256 counterID = _counterIDCounter.current();\\n\\n        _counterIDCounter.increment();\\n\\n        // initialize an empty struct and then update it\\n        DcaBot memory dcaBot;\\n        dcaBot.owner = owner;\\n        dcaBot.orderInterval = orderInterval;\\n        dcaBot.orderSize = orderSize;\\n        dcaBot.lastTimeStamp = block.timestamp;\\n        dcaBot.counter = 0;\\n        dcaBot.maxNumberOfOrders = maxNumberOfOrders;\\n        counterToDcaBot[counterID] = dcaBot;\\n\\n        return counterID;\\n    }\\n\\n    function registerAndPredictID(\\n        string memory name,\\n        uint32 gasLimit,\\n        uint96 fundingAmount,\\n        uint256 orderInterval,\\n        uint256 orderSize\\n    ) public {\\n        require(stakingBalance[msg.sender] > 0, 'Your staking balance is empty! Deposit some DAI first');\\n        require(\\n            stakingBalance[msg.sender] > orderSize,\\n            'Your orderSize is greater than your staking balance! Deposit more DAI'\\n        );\\n\\n        uint256 maxNumberOfOrders = stakingBalance[msg.sender] / orderSize; // integer rounded down\\n\\n        (State memory state, Config memory _c, address[] memory _k) = i_registry.getState();\\n        uint256 oldNonce = state.nonce;\\n\\n        // Create a new counter and pass in as the checkData\\n        uint256 counterID = createNewInstance(msg.sender, orderInterval, orderSize, maxNumberOfOrders);\\n        bytes memory checkData = abi.encodePacked(counterID);\\n        bytes memory payload = abi.encode(\\n            name,\\n            '0x', // bytes calldata encryptedEmail\\n            address(this), // address upkeepContract\\n            gasLimit,\\n            address(msg.sender), // address adminAddress\\n            checkData,\\n            fundingAmount, // (N.B.) minimum 5.0 LINK\\n            0, // uint8 source\\n            address(this)\\n        );\\n\\n        // Transfer Link and call the registrar\\n        i_link.transferAndCall(registrar, fundingAmount, bytes.concat(registerSig, payload));\\n        (state, _c, _k) = i_registry.getState();\\n        uint256 newNonce = state.nonce;\\n\\n        if (newNonce == oldNonce + 1) {\\n            uint256 upkeepID = uint256(\\n                keccak256(abi.encodePacked(blockhash(block.number - 1), address(i_registry), uint32(oldNonce)))\\n            );\\n            // Set the upkeepID\\n            counterToUpkeepID[counterID] = upkeepID;\\n        } else {\\n            revert AutoApproveDisabled();\\n        }\\n    }\\n\\n    function checkConditions(uint256 counterID) internal view returns (bool upkeepNeeded) {\\n        bool isIntervalElapsed = (block.timestamp - counterToDcaBot[counterID].lastTimeStamp) >\\n            counterToDcaBot[counterID].orderInterval;\\n\\n        upkeepNeeded = isIntervalElapsed;\\n    }\\n\\n    function checkUpkeep(bytes calldata checkData) external view returns (bool upkeepNeeded, bytes memory performData) {\\n        // decode the checkData\\n        uint256 counterID = abi.decode(checkData, (uint256));\\n\\n        upkeepNeeded = checkConditions(counterID);\\n\\n        performData = checkData;\\n    }\\n\\n    function performUpkeep(bytes calldata performData) external {\\n        // decode the checkData\\n        uint256 counterID = abi.decode(performData, (uint256));\\n\\n        // Check if this function is called by the checkUpKeep function or a possible attacker by re-checking the Conditions\\n        if (!checkConditions(counterID)) {\\n            revert UpkeepNotNeeded(block.timestamp, counterToDcaBot[counterID].lastTimeStamp);\\n        }\\n\\n        // Re-Set the last time stamp and increment the counter\\n        counterToDcaBot[counterID].lastTimeStamp = block.timestamp;\\n        counterToDcaBot[counterID].counter = counterToDcaBot[counterID].counter + 1;\\n\\n        // TODO: BUY / SELL\\n        swapTokensForTokens(\\n            counterToDcaBot[counterID].owner,\\n            i_stakedToken,\\n            i_tradedToken,\\n            counterToDcaBot[counterID].orderSize\\n        );\\n    }\\n\\n    function requestInflationData() public pure returns (uint256 yoyInflation) {\\n        // // Create a Chainlink request to retrieve API response, find the target data\\n        // Chainlink.Request memory req = buildChainlinkRequest(jobId, address(this), this.fulfill.selector);\\n        // return sendChainlinkRequest(req, fee);\\n        uint256 foo = 1;\\n        return foo;\\n    }\\n\\n    function requestConsumerSentimentData() public pure returns (uint256 consumerSentiment) {\\n        // // Create a Chainlink request to retrieve API response, find the target data\\n        // Chainlink.Request memory req = buildChainlinkRequest(jobId, address(this), this.fulfill.selector);\\n        // return sendChainlinkRequest(req, fee);\\n        uint256 foo = 1;\\n        return foo;\\n    }\\n\\n    function stake(uint256 stakingAmount) public {\\n        // stakingAmount must be > 0\\n        require(stakingAmount > 0, 'amount should be > 0');\\n\\n        // Transfer the specified amount of DAI to this contract\\n        TransferHelper.safeTransferFrom(i_stakedToken, msg.sender, address(this), stakingAmount);\\n\\n        // Update staking balance\\n        stakingBalance[msg.sender] = stakingBalance[msg.sender] + stakingAmount;\\n    }\\n\\n    function unstake() public nonReentrant {\\n        uint256 balance = stakingBalance[msg.sender];\\n\\n        // Balance should be > 0\\n        require(balance > 0, 'Your balance is 0, you have nothing to withdraw');\\n\\n        // Reset staking balance\\n        stakingBalance[msg.sender] = 0;\\n\\n        // Transfer Dai tokens to the sender\\n        TransferHelper.safeTransfer(i_stakedToken, msg.sender, balance);\\n    }\\n\\n    function swapTokensForTokens(\\n        address sender,\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountIn\\n    ) internal returns (uint256 amountOut) {\\n        // Staked DAI must be greater tha amountIn\\n        require(stakingBalance[sender] > amountIn, 'The sender does not have staked enough DAI');\\n\\n        // Approve the router to spend DAI\\n        TransferHelper.safeApprove(tokenIn, address(i_swapRouter), amountIn);\\n\\n        // Create the params that will be used to execute the swap\\n        ISwapRouter.ExactInputSingleParams memory params = ISwapRouter.ExactInputSingleParams({\\n            tokenIn: tokenIn,\\n            tokenOut: tokenOut,\\n            fee: feeTier,\\n            recipient: sender,\\n            deadline: block.timestamp,\\n            amountIn: amountIn,\\n            amountOutMinimum: 0,\\n            sqrtPriceLimitX96: 0\\n        });\\n\\n        // The call to `exactInputSingle` executes the swap\\n        amountOut = i_swapRouter.exactInputSingle(params);\\n\\n        // Update user balance\\n        stakingBalance[sender] = stakingBalance[sender] - amountIn;\\n        tradingBalance[sender] = tradingBalance[sender] + amountOut;\\n\\n        return amountOut;\\n    }\\n}\\n\",\"keccak256\":\"0x6c9f4bb02f41e55d22d5d46e3b403d66b3f5fb70580d79975e4d6727e998a67d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610140604052633659d66660e01b600460006101000a81548163ffffffff021916908360e01c02179055503480156200003757600080fd5b50604051620031d4380380620031d483398181016040528101906200005d9190620002e4565b60016000819055508573ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508473ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508373ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508273ffffffffffffffffffffffffffffffffffffffff1660e08173ffffffffffffffffffffffffffffffffffffffff16815250508173ffffffffffffffffffffffffffffffffffffffff166101008173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff166101208173ffffffffffffffffffffffffffffffffffffffff168152505050505050505062000380565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001dd82620001b0565b9050919050565b6000620001f182620001d0565b9050919050565b6200020381620001e4565b81146200020f57600080fd5b50565b6000815190506200022381620001f8565b92915050565b6200023481620001d0565b81146200024057600080fd5b50565b600081519050620002548162000229565b92915050565b60006200026782620001d0565b9050919050565b62000279816200025a565b81146200028557600080fd5b50565b60008151905062000299816200026e565b92915050565b6000620002ac82620001d0565b9050919050565b620002be816200029f565b8114620002ca57600080fd5b50565b600081519050620002de81620002b3565b92915050565b60008060008060008060c08789031215620003045762000303620001ab565b5b60006200031489828a0162000212565b96505060206200032789828a0162000243565b95505060406200033a89828a0162000288565b94505060606200034d89828a01620002cd565b93505060806200036089828a0162000243565b92505060a06200037389828a0162000243565b9150509295509295509295565b60805160a05160c05160e0516101005161012051612db76200041d600039600081816106b6015261080201526000818161065f01528181610692015281816107e10152610e4901526000818161085d015281816111cd01526112930152600081816104fb01528181610a7301528181610c740152610d4601526000818161051f0152610bbf0152600081816108f80152610b830152612db76000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c806358fb8054116100ad578063963725941161007157806396372594146102fb578063a694fc3a14610319578063a8bdda4d14610335578063ab4578751461036a578063ccd6d4121461039a57610121565b806358fb8054146102545780636e04ff0d1461027257806372f5d98a146102a35780637d253aff146102c15780637e83acf4146102df57610121565b80632def6620116100f45780632def6620146101c25780632e276ffd146101cc57806339b39406146101ea5780634585e33b1461020857806345bc78ab1461022457610121565b806305e019d8146101265780630c6ad4be146101565780632a663606146101865780632b20e397146101a4575b600080fd5b610140600480360381019061013b9190611797565b6103b8565b60405161014d91906117d3565b60405180910390f35b610170600480360381019061016b919061184c565b6103d0565b60405161017d91906117d3565b60405180910390f35b61018e6104f9565b60405161019b9190611912565b60405180910390f35b6101ac61051d565b6040516101b9919061193c565b60405180910390f35b6101ca610541565b005b6101d4610690565b6040516101e1919061193c565b60405180910390f35b6101f26106b4565b6040516101ff919061193c565b60405180910390f35b610222600480360381019061021d91906119bc565b6106d8565b005b61023e60048036038101906102399190611a09565b610843565b60405161024b91906117d3565b60405180910390f35b61025c61085b565b6040516102699190611a57565b60405180910390f35b61028c600480360381019061028791906119bc565b61087f565b60405161029a929190611b1d565b60405180910390f35b6102ab6108f0565b6040516102b89190611b6b565b60405180910390f35b6102c96108f6565b6040516102d69190611ba7565b60405180910390f35b6102f960048036038101906102f49190611d72565b61091a565b005b610303610df3565b60405161031091906117d3565b60405180910390f35b610333600480360381019061032e9190611797565b610e01565b005b61034f600480360381019061034a9190611797565b610f01565b60405161036196959493929190611e09565b60405180910390f35b610384600480360381019061037f9190611a09565b610f5d565b60405161039191906117d3565b60405180910390f35b6103a2610f75565b6040516103af91906117d3565b60405180910390f35b60036020528060005260406000206000915090505481565b6000806103dd6001610f83565b90506103e96001610f91565b6103f1611701565b86816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508581602001818152505084816040018181525050428160600181815250506000816080018181525050838160a0018181525050806002600084815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a082015181600501559050508192505050949350505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b600260005403610586576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057d90611ec7565b60405180910390fd5b60026000819055506000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008111610615576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060c90611f59565b60405180910390fd5b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506106857f00000000000000000000000000000000000000000000000000000000000000003383610fa7565b506001600081905550565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b600082828101906106e99190611797565b90506106f4816110fc565b61074d574260026000838152602001908152602001600020600301546040517fa7586210000000000000000000000000000000000000000000000000000000008152600401610744929190611f79565b60405180910390fd5b4260026000838152602001908152602001600020600301819055506001600260008381526020019081526020016000206004015461078b9190611fd1565b600260008381526020019081526020016000206004018190555061083d6002600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006002600086815260200190815260200160002060020154611144565b50505050565b60056020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006060600084848101906108949190611797565b905061089f816110fc565b925084848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509150509250929050565b610bb881565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541161099c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099390612077565b60405180910390fd5b80600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411610a1d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a149061212f565b60405180910390fd5b600081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610a6a919061217e565b905060008060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631865c57d6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610adc573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610b0591906124cb565b9250925092506000836000015163ffffffff1690506000610b28338989896103d0565b9050600081604051602001610b3d919061255d565b604051602081830303815290604052905060008c308d33858f600030604051602001610b7098979695949392919061266e565b60405160208183030381529060405290507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634000aea07f00000000000000000000000000000000000000000000000000000000000000008d600460009054906101000a900460e01b85604051602001610c01929190612797565b6040516020818303038152906040526040518463ffffffff1660e01b8152600401610c2e939291906127f0565b6020604051808303816000875af1158015610c4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c71919061285a565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631865c57d6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610cdd573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610d0691906124cb565b8097508198508299505050506000876000015163ffffffff169050600185610d2e9190611fd1565b8103610db1576000600143610d439190612887565b407f000000000000000000000000000000000000000000000000000000000000000087604051602001610d7893929190612964565b6040516020818303038152906040528051906020012060001c905080600360008781526020019081526020016000208190555050610de3565b6040517f6874c3d400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505050505050505050505050565b600080600190508091505090565b60008111610e44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3b906129ed565b60405180910390fd5b610e707f0000000000000000000000000000000000000000000000000000000000000000333084611454565b80600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610ebb9190611fd1565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050565b60026020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154908060030154908060040154908060050154905086565b60066020528060005260406000206000915090505481565b600080600190508091505090565b600081600001549050919050565b6001816000016000828254019250508190555050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b8585604051602401610fdc929190612a0d565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516110469190612a36565b6000604051808303816000865af19150503d8060008114611083576040519150601f19603f3d011682016040523d82523d6000602084013e611088565b606091505b50915091508180156110b657506000815114806110b55750808060200190518101906110b4919061285a565b5b5b6110f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ec90612a99565b60405180910390fd5b5050505050565b60008060026000848152602001908152602001600020600101546002600085815260200190815260200160002060030154426111389190612887565b11905080915050919050565b600081600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054116111c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111be90612b2b565b60405180910390fd5b6111f2847f0000000000000000000000000000000000000000000000000000000000000000846115ac565b60006040518061010001604052808673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff168152602001610bb862ffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff16815260200142815260200184815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663414bf389826040518263ffffffff1660e01b81526004016112ea9190612c29565b6020604051808303816000875af1158015611309573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132d9190612c45565b915082600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461137a9190612887565b600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600660008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546114089190611fd1565b600660008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050949350505050565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b86868660405160240161148b93929190612c72565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516114f59190612a36565b6000604051808303816000865af19150503d8060008114611532576040519150601f19603f3d011682016040523d82523d6000602084013e611537565b606091505b50915091508180156115655750600081511480611564575080806020019051810190611563919061285a565b5b5b6115a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161159b90612cf5565b60405180910390fd5b505050505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663095ea7b360e01b85856040516024016115e1929190612a0d565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161164b9190612a36565b6000604051808303816000865af19150503d8060008114611688576040519150601f19603f3d011682016040523d82523d6000602084013e61168d565b606091505b50915091508180156116bb57506000815114806116ba5750808060200190518101906116b9919061285a565b5b5b6116fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116f190612d61565b60405180910390fd5b5050505050565b6040518060c00160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000815260200160008152602001600081525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61177481611761565b811461177f57600080fd5b50565b6000813590506117918161176b565b92915050565b6000602082840312156117ad576117ac611757565b5b60006117bb84828501611782565b91505092915050565b6117cd81611761565b82525050565b60006020820190506117e860008301846117c4565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611819826117ee565b9050919050565b6118298161180e565b811461183457600080fd5b50565b60008135905061184681611820565b92915050565b6000806000806080858703121561186657611865611757565b5b600061187487828801611837565b945050602061188587828801611782565b935050604061189687828801611782565b92505060606118a787828801611782565b91505092959194509250565b6000819050919050565b60006118d86118d36118ce846117ee565b6118b3565b6117ee565b9050919050565b60006118ea826118bd565b9050919050565b60006118fc826118df565b9050919050565b61190c816118f1565b82525050565b60006020820190506119276000830184611903565b92915050565b6119368161180e565b82525050565b6000602082019050611951600083018461192d565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261197c5761197b611957565b5b8235905067ffffffffffffffff8111156119995761199861195c565b5b6020830191508360018202830111156119b5576119b4611961565b5b9250929050565b600080602083850312156119d3576119d2611757565b5b600083013567ffffffffffffffff8111156119f1576119f061175c565b5b6119fd85828601611966565b92509250509250929050565b600060208284031215611a1f57611a1e611757565b5b6000611a2d84828501611837565b91505092915050565b6000611a41826118df565b9050919050565b611a5181611a36565b82525050565b6000602082019050611a6c6000830184611a48565b92915050565b60008115159050919050565b611a8781611a72565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611ac7578082015181840152602081019050611aac565b60008484015250505050565b6000601f19601f8301169050919050565b6000611aef82611a8d565b611af98185611a98565b9350611b09818560208601611aa9565b611b1281611ad3565b840191505092915050565b6000604082019050611b326000830185611a7e565b8181036020830152611b448184611ae4565b90509392505050565b600062ffffff82169050919050565b611b6581611b4d565b82525050565b6000602082019050611b806000830184611b5c565b92915050565b6000611b91826118df565b9050919050565b611ba181611b86565b82525050565b6000602082019050611bbc6000830184611b98565b92915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611bff82611ad3565b810181811067ffffffffffffffff82111715611c1e57611c1d611bc7565b5b80604052505050565b6000611c3161174d565b9050611c3d8282611bf6565b919050565b600067ffffffffffffffff821115611c5d57611c5c611bc7565b5b611c6682611ad3565b9050602081019050919050565b82818337600083830152505050565b6000611c95611c9084611c42565b611c27565b905082815260208101848484011115611cb157611cb0611bc2565b5b611cbc848285611c73565b509392505050565b600082601f830112611cd957611cd8611957565b5b8135611ce9848260208601611c82565b91505092915050565b600063ffffffff82169050919050565b611d0b81611cf2565b8114611d1657600080fd5b50565b600081359050611d2881611d02565b92915050565b60006bffffffffffffffffffffffff82169050919050565b611d4f81611d2e565b8114611d5a57600080fd5b50565b600081359050611d6c81611d46565b92915050565b600080600080600060a08688031215611d8e57611d8d611757565b5b600086013567ffffffffffffffff811115611dac57611dab61175c565b5b611db888828901611cc4565b9550506020611dc988828901611d19565b9450506040611dda88828901611d5d565b9350506060611deb88828901611782565b9250506080611dfc88828901611782565b9150509295509295909350565b600060c082019050611e1e600083018961192d565b611e2b60208301886117c4565b611e3860408301876117c4565b611e4560608301866117c4565b611e5260808301856117c4565b611e5f60a08301846117c4565b979650505050505050565b600082825260208201905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000611eb1601f83611e6a565b9150611ebc82611e7b565b602082019050919050565b60006020820190508181036000830152611ee081611ea4565b9050919050565b7f596f75722062616c616e636520697320302c20796f752068617665206e6f746860008201527f696e6720746f2077697468647261770000000000000000000000000000000000602082015250565b6000611f43602f83611e6a565b9150611f4e82611ee7565b604082019050919050565b60006020820190508181036000830152611f7281611f36565b9050919050565b6000604082019050611f8e60008301856117c4565b611f9b60208301846117c4565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611fdc82611761565b9150611fe783611761565b9250828201905080821115611fff57611ffe611fa2565b5b92915050565b7f596f7572207374616b696e672062616c616e636520697320656d70747921204460008201527f65706f73697420736f6d65204441492066697273740000000000000000000000602082015250565b6000612061603583611e6a565b915061206c82612005565b604082019050919050565b6000602082019050818103600083015261209081612054565b9050919050565b7f596f7572206f7264657253697a652069732067726561746572207468616e207960008201527f6f7572207374616b696e672062616c616e636521204465706f736974206d6f7260208201527f6520444149000000000000000000000000000000000000000000000000000000604082015250565b6000612119604583611e6a565b915061212482612097565b606082019050919050565b600060208201905081810360008301526121488161210c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061218982611761565b915061219483611761565b9250826121a4576121a361214f565b5b828204905092915050565b600080fd5b6000815190506121c381611d02565b92915050565b6000815190506121d881611d46565b92915050565b6000815190506121ed8161176b565b92915050565b600060808284031215612209576122086121af565b5b6122136080611c27565b90506000612223848285016121b4565b6000830152506020612237848285016121c9565b602083015250604061224b848285016121de565b604083015250606061225f848285016121de565b60608301525092915050565b61227481611b4d565b811461227f57600080fd5b50565b6000815190506122918161226b565b92915050565b600061ffff82169050919050565b6122ae81612297565b81146122b957600080fd5b50565b6000815190506122cb816122a5565b92915050565b6000815190506122e081611820565b92915050565b600061018082840312156122fd576122fc6121af565b5b612308610180611c27565b90506000612318848285016121b4565b600083015250602061232c848285016121b4565b602083015250604061234084828501612282565b6040830152506060612354848285016121b4565b606083015250608061236884828501612282565b60808301525060a061237c848285016122bc565b60a08301525060c0612390848285016121c9565b60c08301525060e06123a4848285016121b4565b60e0830152506101006123b9848285016121de565b610100830152506101206123cf848285016121de565b610120830152506101406123e5848285016122d1565b610140830152506101606123fb848285016122d1565b6101608301525092915050565b600067ffffffffffffffff82111561242357612422611bc7565b5b602082029050602081019050919050565b600061244761244284612408565b611c27565b9050808382526020820190506020840283018581111561246a57612469611961565b5b835b81811015612493578061247f88826122d1565b84526020840193505060208101905061246c565b5050509392505050565b600082601f8301126124b2576124b1611957565b5b81516124c2848260208601612434565b91505092915050565b600080600061022084860312156124e5576124e4611757565b5b60006124f3868287016121f3565b9350506080612504868287016122e6565b92505061020084015167ffffffffffffffff8111156125265761252561175c565b5b6125328682870161249d565b9150509250925092565b6000819050919050565b61255761255282611761565b61253c565b82525050565b60006125698284612546565b60208201915081905092915050565b600081519050919050565b600061258e82612578565b6125988185611e6a565b93506125a8818560208601611aa9565b6125b181611ad3565b840191505092915050565b7f3078000000000000000000000000000000000000000000000000000000000000600082015250565b60006125f2600283611e6a565b91506125fd826125bc565b602082019050919050565b61261181611cf2565b82525050565b61262081611d2e565b82525050565b6000819050919050565b600060ff82169050919050565b600061265861265361264e84612626565b6118b3565b612630565b9050919050565b6126688161263d565b82525050565b6000610120820190508181036000830152612689818b612583565b9050818103602083015261269c816125e5565b90506126ab604083018a61192d565b6126b86060830189612608565b6126c5608083018861192d565b81810360a08301526126d78187611ae4565b90506126e660c0830186612617565b6126f360e083018561265f565b61270161010083018461192d565b9998505050505050505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b6127556127508261270e565b61273a565b82525050565b600081905092915050565b600061277182611a8d565b61277b818561275b565b935061278b818560208601611aa9565b80840191505092915050565b60006127a38285612744565b6004820191506127b38284612766565b91508190509392505050565b60006127da6127d56127d084611d2e565b6118b3565b611761565b9050919050565b6127ea816127bf565b82525050565b6000606082019050612805600083018661192d565b61281260208301856127e1565b81810360408301526128248184611ae4565b9050949350505050565b61283781611a72565b811461284257600080fd5b50565b6000815190506128548161282e565b92915050565b6000602082840312156128705761286f611757565b5b600061287e84828501612845565b91505092915050565b600061289282611761565b915061289d83611761565b92508282039050818111156128b5576128b4611fa2565b5b92915050565b6000819050919050565b6000819050919050565b6128e06128db826128bb565b6128c5565b82525050565b60008160601b9050919050565b60006128fe826128e6565b9050919050565b6000612910826128f3565b9050919050565b6129286129238261180e565b612905565b82525050565b60008160e01b9050919050565b60006129468261292e565b9050919050565b61295e61295982611cf2565b61293b565b82525050565b600061297082866128cf565b6020820191506129808285612917565b601482019150612990828461294d565b600482019150819050949350505050565b7f616d6f756e742073686f756c64206265203e2030000000000000000000000000600082015250565b60006129d7601483611e6a565b91506129e2826129a1565b602082019050919050565b60006020820190508181036000830152612a06816129ca565b9050919050565b6000604082019050612a22600083018561192d565b612a2f60208301846117c4565b9392505050565b6000612a428284612766565b915081905092915050565b7f5354000000000000000000000000000000000000000000000000000000000000600082015250565b6000612a83600283611e6a565b9150612a8e82612a4d565b602082019050919050565b60006020820190508181036000830152612ab281612a76565b9050919050565b7f5468652073656e64657220646f6573206e6f742068617665207374616b65642060008201527f656e6f7567682044414900000000000000000000000000000000000000000000602082015250565b6000612b15602a83611e6a565b9150612b2082612ab9565b604082019050919050565b60006020820190508181036000830152612b4481612b08565b9050919050565b612b548161180e565b82525050565b612b6381611b4d565b82525050565b612b7281611761565b82525050565b612b81816117ee565b82525050565b61010082016000820151612b9e6000850182612b4b565b506020820151612bb16020850182612b4b565b506040820151612bc46040850182612b5a565b506060820151612bd76060850182612b4b565b506080820151612bea6080850182612b69565b5060a0820151612bfd60a0850182612b69565b5060c0820151612c1060c0850182612b69565b5060e0820151612c2360e0850182612b78565b50505050565b600061010082019050612c3f6000830184612b87565b92915050565b600060208284031215612c5b57612c5a611757565b5b6000612c69848285016121de565b91505092915050565b6000606082019050612c87600083018661192d565b612c94602083018561192d565b612ca160408301846117c4565b949350505050565b7f5354460000000000000000000000000000000000000000000000000000000000600082015250565b6000612cdf600383611e6a565b9150612cea82612ca9565b602082019050919050565b60006020820190508181036000830152612d0e81612cd2565b9050919050565b7f5341000000000000000000000000000000000000000000000000000000000000600082015250565b6000612d4b600283611e6a565b9150612d5682612d15565b602082019050919050565b60006020820190508181036000830152612d7a81612d3e565b905091905056fea264697066735822122062f947ea80b695d1cef122deab95039016e4da340c3290261e46a589f6cde0be64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101215760003560e01c806358fb8054116100ad578063963725941161007157806396372594146102fb578063a694fc3a14610319578063a8bdda4d14610335578063ab4578751461036a578063ccd6d4121461039a57610121565b806358fb8054146102545780636e04ff0d1461027257806372f5d98a146102a35780637d253aff146102c15780637e83acf4146102df57610121565b80632def6620116100f45780632def6620146101c25780632e276ffd146101cc57806339b39406146101ea5780634585e33b1461020857806345bc78ab1461022457610121565b806305e019d8146101265780630c6ad4be146101565780632a663606146101865780632b20e397146101a4575b600080fd5b610140600480360381019061013b9190611797565b6103b8565b60405161014d91906117d3565b60405180910390f35b610170600480360381019061016b919061184c565b6103d0565b60405161017d91906117d3565b60405180910390f35b61018e6104f9565b60405161019b9190611912565b60405180910390f35b6101ac61051d565b6040516101b9919061193c565b60405180910390f35b6101ca610541565b005b6101d4610690565b6040516101e1919061193c565b60405180910390f35b6101f26106b4565b6040516101ff919061193c565b60405180910390f35b610222600480360381019061021d91906119bc565b6106d8565b005b61023e60048036038101906102399190611a09565b610843565b60405161024b91906117d3565b60405180910390f35b61025c61085b565b6040516102699190611a57565b60405180910390f35b61028c600480360381019061028791906119bc565b61087f565b60405161029a929190611b1d565b60405180910390f35b6102ab6108f0565b6040516102b89190611b6b565b60405180910390f35b6102c96108f6565b6040516102d69190611ba7565b60405180910390f35b6102f960048036038101906102f49190611d72565b61091a565b005b610303610df3565b60405161031091906117d3565b60405180910390f35b610333600480360381019061032e9190611797565b610e01565b005b61034f600480360381019061034a9190611797565b610f01565b60405161036196959493929190611e09565b60405180910390f35b610384600480360381019061037f9190611a09565b610f5d565b60405161039191906117d3565b60405180910390f35b6103a2610f75565b6040516103af91906117d3565b60405180910390f35b60036020528060005260406000206000915090505481565b6000806103dd6001610f83565b90506103e96001610f91565b6103f1611701565b86816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508581602001818152505084816040018181525050428160600181815250506000816080018181525050838160a0018181525050806002600084815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a082015181600501559050508192505050949350505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b600260005403610586576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057d90611ec7565b60405180910390fd5b60026000819055506000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008111610615576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060c90611f59565b60405180910390fd5b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506106857f00000000000000000000000000000000000000000000000000000000000000003383610fa7565b506001600081905550565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b600082828101906106e99190611797565b90506106f4816110fc565b61074d574260026000838152602001908152602001600020600301546040517fa7586210000000000000000000000000000000000000000000000000000000008152600401610744929190611f79565b60405180910390fd5b4260026000838152602001908152602001600020600301819055506001600260008381526020019081526020016000206004015461078b9190611fd1565b600260008381526020019081526020016000206004018190555061083d6002600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006002600086815260200190815260200160002060020154611144565b50505050565b60056020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006060600084848101906108949190611797565b905061089f816110fc565b925084848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509150509250929050565b610bb881565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541161099c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099390612077565b60405180910390fd5b80600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411610a1d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a149061212f565b60405180910390fd5b600081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610a6a919061217e565b905060008060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631865c57d6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610adc573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610b0591906124cb565b9250925092506000836000015163ffffffff1690506000610b28338989896103d0565b9050600081604051602001610b3d919061255d565b604051602081830303815290604052905060008c308d33858f600030604051602001610b7098979695949392919061266e565b60405160208183030381529060405290507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634000aea07f00000000000000000000000000000000000000000000000000000000000000008d600460009054906101000a900460e01b85604051602001610c01929190612797565b6040516020818303038152906040526040518463ffffffff1660e01b8152600401610c2e939291906127f0565b6020604051808303816000875af1158015610c4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c71919061285a565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631865c57d6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610cdd573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610d0691906124cb565b8097508198508299505050506000876000015163ffffffff169050600185610d2e9190611fd1565b8103610db1576000600143610d439190612887565b407f000000000000000000000000000000000000000000000000000000000000000087604051602001610d7893929190612964565b6040516020818303038152906040528051906020012060001c905080600360008781526020019081526020016000208190555050610de3565b6040517f6874c3d400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505050505050505050505050565b600080600190508091505090565b60008111610e44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3b906129ed565b60405180910390fd5b610e707f0000000000000000000000000000000000000000000000000000000000000000333084611454565b80600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610ebb9190611fd1565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050565b60026020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154908060030154908060040154908060050154905086565b60066020528060005260406000206000915090505481565b600080600190508091505090565b600081600001549050919050565b6001816000016000828254019250508190555050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b8585604051602401610fdc929190612a0d565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516110469190612a36565b6000604051808303816000865af19150503d8060008114611083576040519150601f19603f3d011682016040523d82523d6000602084013e611088565b606091505b50915091508180156110b657506000815114806110b55750808060200190518101906110b4919061285a565b5b5b6110f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ec90612a99565b60405180910390fd5b5050505050565b60008060026000848152602001908152602001600020600101546002600085815260200190815260200160002060030154426111389190612887565b11905080915050919050565b600081600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054116111c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111be90612b2b565b60405180910390fd5b6111f2847f0000000000000000000000000000000000000000000000000000000000000000846115ac565b60006040518061010001604052808673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff168152602001610bb862ffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff16815260200142815260200184815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663414bf389826040518263ffffffff1660e01b81526004016112ea9190612c29565b6020604051808303816000875af1158015611309573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132d9190612c45565b915082600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461137a9190612887565b600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600660008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546114089190611fd1565b600660008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050949350505050565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b86868660405160240161148b93929190612c72565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516114f59190612a36565b6000604051808303816000865af19150503d8060008114611532576040519150601f19603f3d011682016040523d82523d6000602084013e611537565b606091505b50915091508180156115655750600081511480611564575080806020019051810190611563919061285a565b5b5b6115a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161159b90612cf5565b60405180910390fd5b505050505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663095ea7b360e01b85856040516024016115e1929190612a0d565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161164b9190612a36565b6000604051808303816000865af19150503d8060008114611688576040519150601f19603f3d011682016040523d82523d6000602084013e61168d565b606091505b50915091508180156116bb57506000815114806116ba5750808060200190518101906116b9919061285a565b5b5b6116fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116f190612d61565b60405180910390fd5b5050505050565b6040518060c00160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000815260200160008152602001600081525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61177481611761565b811461177f57600080fd5b50565b6000813590506117918161176b565b92915050565b6000602082840312156117ad576117ac611757565b5b60006117bb84828501611782565b91505092915050565b6117cd81611761565b82525050565b60006020820190506117e860008301846117c4565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611819826117ee565b9050919050565b6118298161180e565b811461183457600080fd5b50565b60008135905061184681611820565b92915050565b6000806000806080858703121561186657611865611757565b5b600061187487828801611837565b945050602061188587828801611782565b935050604061189687828801611782565b92505060606118a787828801611782565b91505092959194509250565b6000819050919050565b60006118d86118d36118ce846117ee565b6118b3565b6117ee565b9050919050565b60006118ea826118bd565b9050919050565b60006118fc826118df565b9050919050565b61190c816118f1565b82525050565b60006020820190506119276000830184611903565b92915050565b6119368161180e565b82525050565b6000602082019050611951600083018461192d565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261197c5761197b611957565b5b8235905067ffffffffffffffff8111156119995761199861195c565b5b6020830191508360018202830111156119b5576119b4611961565b5b9250929050565b600080602083850312156119d3576119d2611757565b5b600083013567ffffffffffffffff8111156119f1576119f061175c565b5b6119fd85828601611966565b92509250509250929050565b600060208284031215611a1f57611a1e611757565b5b6000611a2d84828501611837565b91505092915050565b6000611a41826118df565b9050919050565b611a5181611a36565b82525050565b6000602082019050611a6c6000830184611a48565b92915050565b60008115159050919050565b611a8781611a72565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611ac7578082015181840152602081019050611aac565b60008484015250505050565b6000601f19601f8301169050919050565b6000611aef82611a8d565b611af98185611a98565b9350611b09818560208601611aa9565b611b1281611ad3565b840191505092915050565b6000604082019050611b326000830185611a7e565b8181036020830152611b448184611ae4565b90509392505050565b600062ffffff82169050919050565b611b6581611b4d565b82525050565b6000602082019050611b806000830184611b5c565b92915050565b6000611b91826118df565b9050919050565b611ba181611b86565b82525050565b6000602082019050611bbc6000830184611b98565b92915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611bff82611ad3565b810181811067ffffffffffffffff82111715611c1e57611c1d611bc7565b5b80604052505050565b6000611c3161174d565b9050611c3d8282611bf6565b919050565b600067ffffffffffffffff821115611c5d57611c5c611bc7565b5b611c6682611ad3565b9050602081019050919050565b82818337600083830152505050565b6000611c95611c9084611c42565b611c27565b905082815260208101848484011115611cb157611cb0611bc2565b5b611cbc848285611c73565b509392505050565b600082601f830112611cd957611cd8611957565b5b8135611ce9848260208601611c82565b91505092915050565b600063ffffffff82169050919050565b611d0b81611cf2565b8114611d1657600080fd5b50565b600081359050611d2881611d02565b92915050565b60006bffffffffffffffffffffffff82169050919050565b611d4f81611d2e565b8114611d5a57600080fd5b50565b600081359050611d6c81611d46565b92915050565b600080600080600060a08688031215611d8e57611d8d611757565b5b600086013567ffffffffffffffff811115611dac57611dab61175c565b5b611db888828901611cc4565b9550506020611dc988828901611d19565b9450506040611dda88828901611d5d565b9350506060611deb88828901611782565b9250506080611dfc88828901611782565b9150509295509295909350565b600060c082019050611e1e600083018961192d565b611e2b60208301886117c4565b611e3860408301876117c4565b611e4560608301866117c4565b611e5260808301856117c4565b611e5f60a08301846117c4565b979650505050505050565b600082825260208201905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000611eb1601f83611e6a565b9150611ebc82611e7b565b602082019050919050565b60006020820190508181036000830152611ee081611ea4565b9050919050565b7f596f75722062616c616e636520697320302c20796f752068617665206e6f746860008201527f696e6720746f2077697468647261770000000000000000000000000000000000602082015250565b6000611f43602f83611e6a565b9150611f4e82611ee7565b604082019050919050565b60006020820190508181036000830152611f7281611f36565b9050919050565b6000604082019050611f8e60008301856117c4565b611f9b60208301846117c4565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611fdc82611761565b9150611fe783611761565b9250828201905080821115611fff57611ffe611fa2565b5b92915050565b7f596f7572207374616b696e672062616c616e636520697320656d70747921204460008201527f65706f73697420736f6d65204441492066697273740000000000000000000000602082015250565b6000612061603583611e6a565b915061206c82612005565b604082019050919050565b6000602082019050818103600083015261209081612054565b9050919050565b7f596f7572206f7264657253697a652069732067726561746572207468616e207960008201527f6f7572207374616b696e672062616c616e636521204465706f736974206d6f7260208201527f6520444149000000000000000000000000000000000000000000000000000000604082015250565b6000612119604583611e6a565b915061212482612097565b606082019050919050565b600060208201905081810360008301526121488161210c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061218982611761565b915061219483611761565b9250826121a4576121a361214f565b5b828204905092915050565b600080fd5b6000815190506121c381611d02565b92915050565b6000815190506121d881611d46565b92915050565b6000815190506121ed8161176b565b92915050565b600060808284031215612209576122086121af565b5b6122136080611c27565b90506000612223848285016121b4565b6000830152506020612237848285016121c9565b602083015250604061224b848285016121de565b604083015250606061225f848285016121de565b60608301525092915050565b61227481611b4d565b811461227f57600080fd5b50565b6000815190506122918161226b565b92915050565b600061ffff82169050919050565b6122ae81612297565b81146122b957600080fd5b50565b6000815190506122cb816122a5565b92915050565b6000815190506122e081611820565b92915050565b600061018082840312156122fd576122fc6121af565b5b612308610180611c27565b90506000612318848285016121b4565b600083015250602061232c848285016121b4565b602083015250604061234084828501612282565b6040830152506060612354848285016121b4565b606083015250608061236884828501612282565b60808301525060a061237c848285016122bc565b60a08301525060c0612390848285016121c9565b60c08301525060e06123a4848285016121b4565b60e0830152506101006123b9848285016121de565b610100830152506101206123cf848285016121de565b610120830152506101406123e5848285016122d1565b610140830152506101606123fb848285016122d1565b6101608301525092915050565b600067ffffffffffffffff82111561242357612422611bc7565b5b602082029050602081019050919050565b600061244761244284612408565b611c27565b9050808382526020820190506020840283018581111561246a57612469611961565b5b835b81811015612493578061247f88826122d1565b84526020840193505060208101905061246c565b5050509392505050565b600082601f8301126124b2576124b1611957565b5b81516124c2848260208601612434565b91505092915050565b600080600061022084860312156124e5576124e4611757565b5b60006124f3868287016121f3565b9350506080612504868287016122e6565b92505061020084015167ffffffffffffffff8111156125265761252561175c565b5b6125328682870161249d565b9150509250925092565b6000819050919050565b61255761255282611761565b61253c565b82525050565b60006125698284612546565b60208201915081905092915050565b600081519050919050565b600061258e82612578565b6125988185611e6a565b93506125a8818560208601611aa9565b6125b181611ad3565b840191505092915050565b7f3078000000000000000000000000000000000000000000000000000000000000600082015250565b60006125f2600283611e6a565b91506125fd826125bc565b602082019050919050565b61261181611cf2565b82525050565b61262081611d2e565b82525050565b6000819050919050565b600060ff82169050919050565b600061265861265361264e84612626565b6118b3565b612630565b9050919050565b6126688161263d565b82525050565b6000610120820190508181036000830152612689818b612583565b9050818103602083015261269c816125e5565b90506126ab604083018a61192d565b6126b86060830189612608565b6126c5608083018861192d565b81810360a08301526126d78187611ae4565b90506126e660c0830186612617565b6126f360e083018561265f565b61270161010083018461192d565b9998505050505050505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b6127556127508261270e565b61273a565b82525050565b600081905092915050565b600061277182611a8d565b61277b818561275b565b935061278b818560208601611aa9565b80840191505092915050565b60006127a38285612744565b6004820191506127b38284612766565b91508190509392505050565b60006127da6127d56127d084611d2e565b6118b3565b611761565b9050919050565b6127ea816127bf565b82525050565b6000606082019050612805600083018661192d565b61281260208301856127e1565b81810360408301526128248184611ae4565b9050949350505050565b61283781611a72565b811461284257600080fd5b50565b6000815190506128548161282e565b92915050565b6000602082840312156128705761286f611757565b5b600061287e84828501612845565b91505092915050565b600061289282611761565b915061289d83611761565b92508282039050818111156128b5576128b4611fa2565b5b92915050565b6000819050919050565b6000819050919050565b6128e06128db826128bb565b6128c5565b82525050565b60008160601b9050919050565b60006128fe826128e6565b9050919050565b6000612910826128f3565b9050919050565b6129286129238261180e565b612905565b82525050565b60008160e01b9050919050565b60006129468261292e565b9050919050565b61295e61295982611cf2565b61293b565b82525050565b600061297082866128cf565b6020820191506129808285612917565b601482019150612990828461294d565b600482019150819050949350505050565b7f616d6f756e742073686f756c64206265203e2030000000000000000000000000600082015250565b60006129d7601483611e6a565b91506129e2826129a1565b602082019050919050565b60006020820190508181036000830152612a06816129ca565b9050919050565b6000604082019050612a22600083018561192d565b612a2f60208301846117c4565b9392505050565b6000612a428284612766565b915081905092915050565b7f5354000000000000000000000000000000000000000000000000000000000000600082015250565b6000612a83600283611e6a565b9150612a8e82612a4d565b602082019050919050565b60006020820190508181036000830152612ab281612a76565b9050919050565b7f5468652073656e64657220646f6573206e6f742068617665207374616b65642060008201527f656e6f7567682044414900000000000000000000000000000000000000000000602082015250565b6000612b15602a83611e6a565b9150612b2082612ab9565b604082019050919050565b60006020820190508181036000830152612b4481612b08565b9050919050565b612b548161180e565b82525050565b612b6381611b4d565b82525050565b612b7281611761565b82525050565b612b81816117ee565b82525050565b61010082016000820151612b9e6000850182612b4b565b506020820151612bb16020850182612b4b565b506040820151612bc46040850182612b5a565b506060820151612bd76060850182612b4b565b506080820151612bea6080850182612b69565b5060a0820151612bfd60a0850182612b69565b5060c0820151612c1060c0850182612b69565b5060e0820151612c2360e0850182612b78565b50505050565b600061010082019050612c3f6000830184612b87565b92915050565b600060208284031215612c5b57612c5a611757565b5b6000612c69848285016121de565b91505092915050565b6000606082019050612c87600083018661192d565b612c94602083018561192d565b612ca160408301846117c4565b949350505050565b7f5354460000000000000000000000000000000000000000000000000000000000600082015250565b6000612cdf600383611e6a565b9150612cea82612ca9565b602082019050919050565b60006020820190508181036000830152612d0e81612cd2565b9050919050565b7f5341000000000000000000000000000000000000000000000000000000000000600082015250565b6000612d4b600283611e6a565b9150612d5682612d15565b602082019050919050565b60006020820190508181036000830152612d7a81612d3e565b905091905056fea264697066735822122062f947ea80b695d1cef122deab95039016e4da340c3290261e46a589f6cde0be64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2359,
        "contract": "contracts/TradingBotV2.sol:TradingBotV2",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 2889,
        "contract": "contracts/TradingBotV2.sol:TradingBotV2",
        "label": "_counterIDCounter",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Counter)2472_storage"
      },
      {
        "astId": 2894,
        "contract": "contracts/TradingBotV2.sol:TradingBotV2",
        "label": "counterToDcaBot",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(DcaBot)2873_storage)"
      },
      {
        "astId": 2898,
        "contract": "contracts/TradingBotV2.sol:TradingBotV2",
        "label": "counterToUpkeepID",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2911,
        "contract": "contracts/TradingBotV2.sol:TradingBotV2",
        "label": "registerSig",
        "offset": 0,
        "slot": "4",
        "type": "t_bytes4"
      },
      {
        "astId": 2922,
        "contract": "contracts/TradingBotV2.sol:TradingBotV2",
        "label": "stakingBalance",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2926,
        "contract": "contracts/TradingBotV2.sol:TradingBotV2",
        "label": "tradingBalance",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(DcaBot)2873_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DcaBot)",
        "numberOfBytes": "32",
        "value": "t_struct(DcaBot)2873_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Counter)2472_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 2471,
            "contract": "contracts/TradingBotV2.sol:TradingBotV2",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(DcaBot)2873_storage": {
        "encoding": "inplace",
        "label": "struct DcaBot",
        "members": [
          {
            "astId": 2862,
            "contract": "contracts/TradingBotV2.sol:TradingBotV2",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2864,
            "contract": "contracts/TradingBotV2.sol:TradingBotV2",
            "label": "orderInterval",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2866,
            "contract": "contracts/TradingBotV2.sol:TradingBotV2",
            "label": "orderSize",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2868,
            "contract": "contracts/TradingBotV2.sol:TradingBotV2",
            "label": "lastTimeStamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2870,
            "contract": "contracts/TradingBotV2.sol:TradingBotV2",
            "label": "counter",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 2872,
            "contract": "contracts/TradingBotV2.sol:TradingBotV2",
            "label": "maxNumberOfOrders",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}