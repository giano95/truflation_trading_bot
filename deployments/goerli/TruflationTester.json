{
  "address": "0x568C059C287C5cc3428d268F52fC6C351f025a02",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "link_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "oracleId_",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "jobId_",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "fee_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "ChainlinkCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "ChainlinkFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "ChainlinkRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_jobId",
          "type": "string"
        }
      ],
      "name": "changeJobId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        }
      ],
      "name": "changeOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_requestId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_inflation",
          "type": "bytes"
        }
      ],
      "name": "fulfillInflationWei",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_requestId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_inflation",
          "type": "bytes"
        }
      ],
      "name": "fulfillYoyInflation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getChainlinkToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inflationWei",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "jobId",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleId",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestInflationWei",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestYoyInflation",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transferAndRequestInflationWei",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transferAndRequestYoyInflation",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawLink",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "yoyInflation",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9425f0d02d8462a75e551b113a7fa63bd1ec7e39a4f65d8eb6e28d23abba52b6",
  "receipt": {
    "to": null,
    "from": "0x81617079A419ab4562b29A92181402BdF389a1fA",
    "contractAddress": "0x568C059C287C5cc3428d268F52fC6C351f025a02",
    "transactionIndex": 38,
    "gasUsed": "3135845",
    "logsBloom": "0x
    "blockHash": "0x724808ffcbecfa6c151de973e19e83948f9b0269e0648bf21f80bbc7f5bc743e",
    "transactionHash": "0x9425f0d02d8462a75e551b113a7fa63bd1ec7e39a4f65d8eb6e28d23abba52b6",
    "logs": [],
    "blockNumber": 7949527,
    "cumulativeGasUsed": "16253211",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x326C977E6efc84E512bB9C30f76E30c160eD06FB",
    "0xcf72083697aB8A45905870C387dC93f380f2557b",
    "8b459447262a4ccf8863962e073576d9",
    "10000000000000000"
  ],
  "numDeployments": 4,
  "solcInputHash": "352f03b278115b3750602b4931e5f951",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"link_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleId_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"jobId_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"fee_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_jobId\",\"type\":\"string\"}],\"name\":\"changeJobId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"changeOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_inflation\",\"type\":\"bytes\"}],\"name\":\"fulfillInflationWei\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_inflation\",\"type\":\"bytes\"}],\"name\":\"fulfillYoyInflation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainlinkToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inflationWei\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jobId\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleId\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestInflationWei\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestYoyInflation\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferAndRequestInflationWei\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferAndRequestYoyInflation\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawLink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yoyInflation\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Allows an ownership transfer to be completed by the recipient.\"},\"owner()\":{\"notice\":\"Get the current owner\"},\"transferOwnership(address)\":{\"notice\":\"Allows an owner to begin transferring ownership to a new address, pending.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TruflationTester.sol\":\"TruflationTester\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/Chainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {CBORChainlink} from \\\"./vendor/CBORChainlink.sol\\\";\\nimport {BufferChainlink} from \\\"./vendor/BufferChainlink.sol\\\";\\n\\n/**\\n * @title Library for common Chainlink functions\\n * @dev Uses imported CBOR library for encoding to buffer\\n */\\nlibrary Chainlink {\\n  uint256 internal constant defaultBufferSize = 256; // solhint-disable-line const-name-snakecase\\n\\n  using CBORChainlink for BufferChainlink.buffer;\\n\\n  struct Request {\\n    bytes32 id;\\n    address callbackAddress;\\n    bytes4 callbackFunctionId;\\n    uint256 nonce;\\n    BufferChainlink.buffer buf;\\n  }\\n\\n  /**\\n   * @notice Initializes a Chainlink request\\n   * @dev Sets the ID, callback address, and callback function signature on the request\\n   * @param self The uninitialized request\\n   * @param jobId The Job Specification ID\\n   * @param callbackAddr The callback address\\n   * @param callbackFunc The callback function signature\\n   * @return The initialized request\\n   */\\n  function initialize(\\n    Request memory self,\\n    bytes32 jobId,\\n    address callbackAddr,\\n    bytes4 callbackFunc\\n  ) internal pure returns (Chainlink.Request memory) {\\n    BufferChainlink.init(self.buf, defaultBufferSize);\\n    self.id = jobId;\\n    self.callbackAddress = callbackAddr;\\n    self.callbackFunctionId = callbackFunc;\\n    return self;\\n  }\\n\\n  /**\\n   * @notice Sets the data for the buffer without encoding CBOR on-chain\\n   * @dev CBOR can be closed with curly-brackets {} or they can be left off\\n   * @param self The initialized request\\n   * @param data The CBOR data\\n   */\\n  function setBuffer(Request memory self, bytes memory data) internal pure {\\n    BufferChainlink.init(self.buf, data.length);\\n    BufferChainlink.append(self.buf, data);\\n  }\\n\\n  /**\\n   * @notice Adds a string value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The string value to add\\n   */\\n  function add(\\n    Request memory self,\\n    string memory key,\\n    string memory value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeString(value);\\n  }\\n\\n  /**\\n   * @notice Adds a bytes value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The bytes value to add\\n   */\\n  function addBytes(\\n    Request memory self,\\n    string memory key,\\n    bytes memory value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeBytes(value);\\n  }\\n\\n  /**\\n   * @notice Adds a int256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The int256 value to add\\n   */\\n  function addInt(\\n    Request memory self,\\n    string memory key,\\n    int256 value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeInt(value);\\n  }\\n\\n  /**\\n   * @notice Adds a uint256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The uint256 value to add\\n   */\\n  function addUint(\\n    Request memory self,\\n    string memory key,\\n    uint256 value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeUInt(value);\\n  }\\n\\n  /**\\n   * @notice Adds an array of strings to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param values The array of string values to add\\n   */\\n  function addStringArray(\\n    Request memory self,\\n    string memory key,\\n    string[] memory values\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.startArray();\\n    for (uint256 i = 0; i < values.length; i++) {\\n      self.buf.encodeString(values[i]);\\n    }\\n    self.buf.endSequence();\\n  }\\n}\\n\",\"keccak256\":\"0x3e133ddc69d0909fbe338c34b70cbf8dd262c70fd670b3632424c1858de25105\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/ChainlinkClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Chainlink.sol\\\";\\nimport \\\"./interfaces/ENSInterface.sol\\\";\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"./interfaces/ChainlinkRequestInterface.sol\\\";\\nimport \\\"./interfaces/OperatorInterface.sol\\\";\\nimport \\\"./interfaces/PointerInterface.sol\\\";\\nimport {ENSResolver as ENSResolver_Chainlink} from \\\"./vendor/ENSResolver.sol\\\";\\n\\n/**\\n * @title The ChainlinkClient contract\\n * @notice Contract writers can inherit this contract in order to create requests for the\\n * Chainlink network\\n */\\nabstract contract ChainlinkClient {\\n  using Chainlink for Chainlink.Request;\\n\\n  uint256 internal constant LINK_DIVISIBILITY = 10**18;\\n  uint256 private constant AMOUNT_OVERRIDE = 0;\\n  address private constant SENDER_OVERRIDE = address(0);\\n  uint256 private constant ORACLE_ARGS_VERSION = 1;\\n  uint256 private constant OPERATOR_ARGS_VERSION = 2;\\n  bytes32 private constant ENS_TOKEN_SUBNAME = keccak256(\\\"link\\\");\\n  bytes32 private constant ENS_ORACLE_SUBNAME = keccak256(\\\"oracle\\\");\\n  address private constant LINK_TOKEN_POINTER = 0xC89bD4E1632D3A43CB03AAAd5262cbe4038Bc571;\\n\\n  ENSInterface private s_ens;\\n  bytes32 private s_ensNode;\\n  LinkTokenInterface private s_link;\\n  OperatorInterface private s_oracle;\\n  uint256 private s_requestCount = 1;\\n  mapping(bytes32 => address) private s_pendingRequests;\\n\\n  event ChainlinkRequested(bytes32 indexed id);\\n  event ChainlinkFulfilled(bytes32 indexed id);\\n  event ChainlinkCancelled(bytes32 indexed id);\\n\\n  /**\\n   * @notice Creates a request that can hold additional parameters\\n   * @param specId The Job Specification ID that the request will be created for\\n   * @param callbackAddr address to operate the callback on\\n   * @param callbackFunctionSignature function signature to use for the callback\\n   * @return A Chainlink Request struct in memory\\n   */\\n  function buildChainlinkRequest(\\n    bytes32 specId,\\n    address callbackAddr,\\n    bytes4 callbackFunctionSignature\\n  ) internal pure returns (Chainlink.Request memory) {\\n    Chainlink.Request memory req;\\n    return req.initialize(specId, callbackAddr, callbackFunctionSignature);\\n  }\\n\\n  /**\\n   * @notice Creates a request that can hold additional parameters\\n   * @param specId The Job Specification ID that the request will be created for\\n   * @param callbackFunctionSignature function signature to use for the callback\\n   * @return A Chainlink Request struct in memory\\n   */\\n  function buildOperatorRequest(bytes32 specId, bytes4 callbackFunctionSignature)\\n    internal\\n    view\\n    returns (Chainlink.Request memory)\\n  {\\n    Chainlink.Request memory req;\\n    return req.initialize(specId, address(this), callbackFunctionSignature);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the stored oracle address\\n   * @dev Calls `chainlinkRequestTo` with the stored oracle address\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendChainlinkRequest(Chainlink.Request memory req, uint256 payment) internal returns (bytes32) {\\n    return sendChainlinkRequestTo(address(s_oracle), req, payment);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the specified oracle address\\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\\n   * send LINK which creates a request on the target oracle contract.\\n   * Emits ChainlinkRequested event.\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendChainlinkRequestTo(\\n    address oracleAddress,\\n    Chainlink.Request memory req,\\n    uint256 payment\\n  ) internal returns (bytes32 requestId) {\\n    uint256 nonce = s_requestCount;\\n    s_requestCount = nonce + 1;\\n    bytes memory encodedRequest = abi.encodeWithSelector(\\n      ChainlinkRequestInterface.oracleRequest.selector,\\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\\n      req.id,\\n      address(this),\\n      req.callbackFunctionId,\\n      nonce,\\n      ORACLE_ARGS_VERSION,\\n      req.buf.buf\\n    );\\n    return _rawRequest(oracleAddress, nonce, payment, encodedRequest);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the stored oracle address\\n   * @dev This function supports multi-word response\\n   * @dev Calls `sendOperatorRequestTo` with the stored oracle address\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendOperatorRequest(Chainlink.Request memory req, uint256 payment) internal returns (bytes32) {\\n    return sendOperatorRequestTo(address(s_oracle), req, payment);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the specified oracle address\\n   * @dev This function supports multi-word response\\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\\n   * send LINK which creates a request on the target oracle contract.\\n   * Emits ChainlinkRequested event.\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendOperatorRequestTo(\\n    address oracleAddress,\\n    Chainlink.Request memory req,\\n    uint256 payment\\n  ) internal returns (bytes32 requestId) {\\n    uint256 nonce = s_requestCount;\\n    s_requestCount = nonce + 1;\\n    bytes memory encodedRequest = abi.encodeWithSelector(\\n      OperatorInterface.operatorRequest.selector,\\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\\n      req.id,\\n      req.callbackFunctionId,\\n      nonce,\\n      OPERATOR_ARGS_VERSION,\\n      req.buf.buf\\n    );\\n    return _rawRequest(oracleAddress, nonce, payment, encodedRequest);\\n  }\\n\\n  /**\\n   * @notice Make a request to an oracle\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param nonce used to generate the request ID\\n   * @param payment The amount of LINK to send for the request\\n   * @param encodedRequest data encoded for request type specific format\\n   * @return requestId The request ID\\n   */\\n  function _rawRequest(\\n    address oracleAddress,\\n    uint256 nonce,\\n    uint256 payment,\\n    bytes memory encodedRequest\\n  ) private returns (bytes32 requestId) {\\n    requestId = keccak256(abi.encodePacked(this, nonce));\\n    s_pendingRequests[requestId] = oracleAddress;\\n    emit ChainlinkRequested(requestId);\\n    require(s_link.transferAndCall(oracleAddress, payment, encodedRequest), \\\"unable to transferAndCall to oracle\\\");\\n  }\\n\\n  /**\\n   * @notice Allows a request to be cancelled if it has not been fulfilled\\n   * @dev Requires keeping track of the expiration value emitted from the oracle contract.\\n   * Deletes the request from the `pendingRequests` mapping.\\n   * Emits ChainlinkCancelled event.\\n   * @param requestId The request ID\\n   * @param payment The amount of LINK sent for the request\\n   * @param callbackFunc The callback function specified for the request\\n   * @param expiration The time of the expiration for the request\\n   */\\n  function cancelChainlinkRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunc,\\n    uint256 expiration\\n  ) internal {\\n    OperatorInterface requested = OperatorInterface(s_pendingRequests[requestId]);\\n    delete s_pendingRequests[requestId];\\n    emit ChainlinkCancelled(requestId);\\n    requested.cancelOracleRequest(requestId, payment, callbackFunc, expiration);\\n  }\\n\\n  /**\\n   * @notice the next request count to be used in generating a nonce\\n   * @dev starts at 1 in order to ensure consistent gas cost\\n   * @return returns the next request count to be used in a nonce\\n   */\\n  function getNextRequestCount() internal view returns (uint256) {\\n    return s_requestCount;\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle address\\n   * @param oracleAddress The address of the oracle contract\\n   */\\n  function setChainlinkOracle(address oracleAddress) internal {\\n    s_oracle = OperatorInterface(oracleAddress);\\n  }\\n\\n  /**\\n   * @notice Sets the LINK token address\\n   * @param linkAddress The address of the LINK token contract\\n   */\\n  function setChainlinkToken(address linkAddress) internal {\\n    s_link = LinkTokenInterface(linkAddress);\\n  }\\n\\n  /**\\n   * @notice Sets the Chainlink token address for the public\\n   * network as given by the Pointer contract\\n   */\\n  function setPublicChainlinkToken() internal {\\n    setChainlinkToken(PointerInterface(LINK_TOKEN_POINTER).getAddress());\\n  }\\n\\n  /**\\n   * @notice Retrieves the stored address of the LINK token\\n   * @return The address of the LINK token\\n   */\\n  function chainlinkTokenAddress() internal view returns (address) {\\n    return address(s_link);\\n  }\\n\\n  /**\\n   * @notice Retrieves the stored address of the oracle contract\\n   * @return The address of the oracle contract\\n   */\\n  function chainlinkOracleAddress() internal view returns (address) {\\n    return address(s_oracle);\\n  }\\n\\n  /**\\n   * @notice Allows for a request which was created on another contract to be fulfilled\\n   * on this contract\\n   * @param oracleAddress The address of the oracle contract that will fulfill the request\\n   * @param requestId The request ID used for the response\\n   */\\n  function addChainlinkExternalRequest(address oracleAddress, bytes32 requestId) internal notPendingRequest(requestId) {\\n    s_pendingRequests[requestId] = oracleAddress;\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle and LINK token contracts with the addresses resolved by ENS\\n   * @dev Accounts for subnodes having different resolvers\\n   * @param ensAddress The address of the ENS contract\\n   * @param node The ENS node hash\\n   */\\n  function useChainlinkWithENS(address ensAddress, bytes32 node) internal {\\n    s_ens = ENSInterface(ensAddress);\\n    s_ensNode = node;\\n    bytes32 linkSubnode = keccak256(abi.encodePacked(s_ensNode, ENS_TOKEN_SUBNAME));\\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(s_ens.resolver(linkSubnode));\\n    setChainlinkToken(resolver.addr(linkSubnode));\\n    updateChainlinkOracleWithENS();\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle contract with the address resolved by ENS\\n   * @dev This may be called on its own as long as `useChainlinkWithENS` has been called previously\\n   */\\n  function updateChainlinkOracleWithENS() internal {\\n    bytes32 oracleSubnode = keccak256(abi.encodePacked(s_ensNode, ENS_ORACLE_SUBNAME));\\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(s_ens.resolver(oracleSubnode));\\n    setChainlinkOracle(resolver.addr(oracleSubnode));\\n  }\\n\\n  /**\\n   * @notice Ensures that the fulfillment is valid for this contract\\n   * @dev Use if the contract developer prefers methods instead of modifiers for validation\\n   * @param requestId The request ID for fulfillment\\n   */\\n  function validateChainlinkCallback(bytes32 requestId)\\n    internal\\n    recordChainlinkFulfillment(requestId)\\n  // solhint-disable-next-line no-empty-blocks\\n  {\\n\\n  }\\n\\n  /**\\n   * @dev Reverts if the sender is not the oracle of the request.\\n   * Emits ChainlinkFulfilled event.\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier recordChainlinkFulfillment(bytes32 requestId) {\\n    require(msg.sender == s_pendingRequests[requestId], \\\"Source must be the oracle of the request\\\");\\n    delete s_pendingRequests[requestId];\\n    emit ChainlinkFulfilled(requestId);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Reverts if the request is already pending\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier notPendingRequest(bytes32 requestId) {\\n    require(s_pendingRequests[requestId] == address(0), \\\"Request is already pending\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xa221ccfa4763977cc78c57e3a83d47f5aaf7c15535a2c20dba5f46af80fb3bd7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/ConfirmedOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\",\"keccak256\":\"0x99d0b0786fe368970009c703f2249bfbc56340ddf1a28b60d2915bb58c34cd72\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/OwnableInterface.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwnerWithProposal is OwnableInterface {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /**\\n   * @notice Allows an owner to begin transferring ownership to a new address,\\n   * pending.\\n   */\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /**\\n   * @notice Allows an ownership transfer to be completed by the recipient.\\n   */\\n  function acceptOwnership() external override {\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Get the current owner\\n   */\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /**\\n   * @notice validate, transfer ownership, and emit relevant events\\n   */\\n  function _transferOwnership(address to) private {\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /**\\n   * @notice validate access\\n   */\\n  function _validateOwnership() internal view {\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /**\\n   * @notice Reverts if called by anyone other than the contract owner.\\n   */\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xa2f137a1d066795aeac76226e58f33c982278cdd34b4f09e5a2243d5a0924654\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/ChainlinkRequestInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ChainlinkRequestInterface {\\n  function oracleRequest(\\n    address sender,\\n    uint256 requestPrice,\\n    bytes32 serviceAgreementID,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion,\\n    bytes calldata data\\n  ) external;\\n\\n  function cancelOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration\\n  ) external;\\n}\\n\",\"keccak256\":\"0xa8adfbd0326c982c38ea3808a4da52f0a51807241787c4bd28235bbe86707c04\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/ENSInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ENSInterface {\\n  // Logged when the owner of a node assigns a new owner to a subnode.\\n  event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n  // Logged when the owner of a node transfers ownership to a new account.\\n  event Transfer(bytes32 indexed node, address owner);\\n\\n  // Logged when the resolver for a node changes.\\n  event NewResolver(bytes32 indexed node, address resolver);\\n\\n  // Logged when the TTL of a node changes\\n  event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n  function setSubnodeOwner(\\n    bytes32 node,\\n    bytes32 label,\\n    address owner\\n  ) external;\\n\\n  function setResolver(bytes32 node, address resolver) external;\\n\\n  function setOwner(bytes32 node, address owner) external;\\n\\n  function setTTL(bytes32 node, uint64 ttl) external;\\n\\n  function owner(bytes32 node) external view returns (address);\\n\\n  function resolver(bytes32 node) external view returns (address);\\n\\n  function ttl(bytes32 node) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xe51365458d82233a55f5ad4492a3b6bf56332d21cad6b0a5f21b8a026fcfd6d0\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xc7d7cd730d36825485ef4107d93c3ff18b9f3a5a00ea3d5988ba9a0bd70b10c5\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OperatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OracleInterface.sol\\\";\\nimport \\\"./ChainlinkRequestInterface.sol\\\";\\n\\ninterface OperatorInterface is OracleInterface, ChainlinkRequestInterface {\\n  function operatorRequest(\\n    address sender,\\n    uint256 payment,\\n    bytes32 specId,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion,\\n    bytes calldata data\\n  ) external;\\n\\n  function fulfillOracleRequest2(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes calldata data\\n  ) external returns (bool);\\n\\n  function ownerTransferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function distributeFunds(address payable[] calldata receivers, uint256[] calldata amounts) external payable;\\n\\n  function getAuthorizedSenders() external returns (address[] memory);\\n\\n  function setAuthorizedSenders(address[] calldata senders) external;\\n\\n  function getForwarder() external returns (address);\\n}\\n\",\"keccak256\":\"0x79a7c77b8f87be6ef02a566765077ed599724b060a209f34f8907eec5615da68\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OracleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface OracleInterface {\\n  function fulfillOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes32 data\\n  ) external returns (bool);\\n\\n  function isAuthorizedSender(address node) external view returns (bool);\\n\\n  function withdraw(address recipient, uint256 amount) external;\\n\\n  function withdrawable() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3a86242e005bad9daf1b4794399a81ba373069355f38c8a07b58e57abc32513a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OwnableInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface OwnableInterface {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0xb8b3a97783dddc198b790c4cec1eda7fb47aa38cbaea6555220d0ed8c735c086\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/PointerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface PointerInterface {\\n  function getAddress() external view returns (address);\\n}\\n\",\"keccak256\":\"0x42e5d62984f9d57bab7e32b2c6e3af86f4feb232ea2af6c822032fae88203bd7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/BufferChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev A library for working with mutable byte buffers in Solidity.\\n *\\n * Byte buffers are mutable and expandable, and provide a variety of primitives\\n * for writing to them. At any time you can fetch a bytes object containing the\\n * current contents of the buffer. The bytes object should not be stored between\\n * operations, as it may change due to resizing of the buffer.\\n */\\nlibrary BufferChainlink {\\n  /**\\n   * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n   *      a capacity. The capacity may be longer than the current value, in\\n   *      which case it can be extended without the need to allocate more memory.\\n   */\\n  struct buffer {\\n    bytes buf;\\n    uint256 capacity;\\n  }\\n\\n  /**\\n   * @dev Initializes a buffer with an initial capacity.\\n   * @param buf The buffer to initialize.\\n   * @param capacity The number of bytes of space to allocate the buffer.\\n   * @return The buffer, for chaining.\\n   */\\n  function init(buffer memory buf, uint256 capacity) internal pure returns (buffer memory) {\\n    if (capacity % 32 != 0) {\\n      capacity += 32 - (capacity % 32);\\n    }\\n    // Allocate space for the buffer data\\n    buf.capacity = capacity;\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(buf, ptr)\\n      mstore(ptr, 0)\\n      mstore(0x40, add(32, add(ptr, capacity)))\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Initializes a new buffer from an existing bytes object.\\n   *      Changes to the buffer may mutate the original value.\\n   * @param b The bytes object to initialize the buffer with.\\n   * @return A new buffer.\\n   */\\n  function fromBytes(bytes memory b) internal pure returns (buffer memory) {\\n    buffer memory buf;\\n    buf.buf = b;\\n    buf.capacity = b.length;\\n    return buf;\\n  }\\n\\n  function resize(buffer memory buf, uint256 capacity) private pure {\\n    bytes memory oldbuf = buf.buf;\\n    init(buf, capacity);\\n    append(buf, oldbuf);\\n  }\\n\\n  function max(uint256 a, uint256 b) private pure returns (uint256) {\\n    if (a > b) {\\n      return a;\\n    }\\n    return b;\\n  }\\n\\n  /**\\n   * @dev Sets buffer length to 0.\\n   * @param buf The buffer to truncate.\\n   * @return The original buffer, for chaining..\\n   */\\n  function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n    assembly {\\n      let bufptr := mload(buf)\\n      mstore(bufptr, 0)\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The start offset to write to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    require(len <= data.length);\\n\\n    if (off + len > buf.capacity) {\\n      resize(buf, max(buf.capacity, len + off) * 2);\\n    }\\n\\n    uint256 dest;\\n    uint256 src;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Start address = buffer address + offset + sizeof(buffer length)\\n      dest := add(add(bufptr, 32), off)\\n      // Update buffer length if we're extending it\\n      if gt(add(len, off), buflen) {\\n        mstore(bufptr, add(len, off))\\n      }\\n      src := add(data, 32)\\n    }\\n\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    unchecked {\\n      uint256 mask = (256**(32 - len)) - 1;\\n      assembly {\\n        let srcpart := and(mload(src), not(mask))\\n        let destpart := and(mload(dest), mask)\\n        mstore(dest, or(destpart, srcpart))\\n      }\\n    }\\n\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(\\n    buffer memory buf,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, len);\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, data.length);\\n  }\\n\\n  /**\\n   * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write the byte at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeUint8(\\n    buffer memory buf,\\n    uint256 off,\\n    uint8 data\\n  ) internal pure returns (buffer memory) {\\n    if (off >= buf.capacity) {\\n      resize(buf, buf.capacity * 2);\\n    }\\n\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Address = buffer address + sizeof(buffer length) + off\\n      let dest := add(add(bufptr, off), 32)\\n      mstore8(dest, data)\\n      // Update buffer length if we extended it\\n      if eq(off, buflen) {\\n        mstore(bufptr, add(buflen, 1))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendUint8(buffer memory buf, uint8 data) internal pure returns (buffer memory) {\\n    return writeUint8(buf, buf.buf.length, data);\\n  }\\n\\n  /**\\n   * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\n   *      exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (left-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes32 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    unchecked {\\n      uint256 mask = (256**len) - 1;\\n      // Right-align data\\n      data = data >> (8 * (32 - len));\\n      assembly {\\n        // Memory address of the buffer data\\n        let bufptr := mload(buf)\\n        // Address = buffer address + sizeof(buffer length) + off + len\\n        let dest := add(add(bufptr, off), len)\\n        mstore(dest, or(and(mload(dest), not(mask)), data))\\n        // Update buffer length if we extended it\\n        if gt(add(off, len), mload(bufptr)) {\\n          mstore(bufptr, add(off, len))\\n        }\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeBytes20(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes20 data\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, off, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chhaining.\\n   */\\n  function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, 32);\\n  }\\n\\n  /**\\n   * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (right-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeInt(\\n    buffer memory buf,\\n    uint256 off,\\n    uint256 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint256 mask = (256**len) - 1;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + off + sizeof(buffer length) + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n   * exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer.\\n   */\\n  function appendInt(\\n    buffer memory buf,\\n    uint256 data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return writeInt(buf, buf.buf.length, data, len);\\n  }\\n}\\n\",\"keccak256\":\"0x89388a631c16ad993e4d76d8d19e08ae98e1397f5dfdfb5f9c0b91015df4cf5d\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/CBORChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.19;\\n\\nimport {BufferChainlink} from \\\"./BufferChainlink.sol\\\";\\n\\nlibrary CBORChainlink {\\n  using BufferChainlink for BufferChainlink.buffer;\\n\\n  uint8 private constant MAJOR_TYPE_INT = 0;\\n  uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n  uint8 private constant MAJOR_TYPE_BYTES = 2;\\n  uint8 private constant MAJOR_TYPE_STRING = 3;\\n  uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n  uint8 private constant MAJOR_TYPE_MAP = 5;\\n  uint8 private constant MAJOR_TYPE_TAG = 6;\\n  uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n  uint8 private constant TAG_TYPE_BIGNUM = 2;\\n  uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n  function encodeFixedNumeric(BufferChainlink.buffer memory buf, uint8 major, uint64 value) private pure {\\n    if(value <= 23) {\\n      buf.appendUint8(uint8((major << 5) | value));\\n    } else if (value <= 0xFF) {\\n      buf.appendUint8(uint8((major << 5) | 24));\\n      buf.appendInt(value, 1);\\n    } else if (value <= 0xFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 25));\\n      buf.appendInt(value, 2);\\n    } else if (value <= 0xFFFFFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 26));\\n      buf.appendInt(value, 4);\\n    } else {\\n      buf.appendUint8(uint8((major << 5) | 27));\\n      buf.appendInt(value, 8);\\n    }\\n  }\\n\\n  function encodeIndefiniteLengthType(BufferChainlink.buffer memory buf, uint8 major) private pure {\\n    buf.appendUint8(uint8((major << 5) | 31));\\n  }\\n\\n  function encodeUInt(BufferChainlink.buffer memory buf, uint value) internal pure {\\n    if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, value);\\n    } else {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n    }\\n  }\\n\\n  function encodeInt(BufferChainlink.buffer memory buf, int value) internal pure {\\n    if(value < -0x10000000000000000) {\\n      encodeSignedBigNum(buf, value);\\n    } else if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, uint(value));\\n    } else if(value >= 0) {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(uint256(value)));\\n    } else {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(uint256(-1 - value)));\\n    }\\n  }\\n\\n  function encodeBytes(BufferChainlink.buffer memory buf, bytes memory value) internal pure {\\n    encodeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n    buf.append(value);\\n  }\\n\\n  function encodeBigNum(BufferChainlink.buffer memory buf, uint value) internal pure {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n    encodeBytes(buf, abi.encode(value));\\n  }\\n\\n  function encodeSignedBigNum(BufferChainlink.buffer memory buf, int input) internal pure {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM));\\n    encodeBytes(buf, abi.encode(uint256(-1 - input)));\\n  }\\n\\n  function encodeString(BufferChainlink.buffer memory buf, string memory value) internal pure {\\n    encodeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n    buf.append(bytes(value));\\n  }\\n\\n  function startArray(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n  }\\n\\n  function startMap(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n  }\\n\\n  function endSequence(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n  }\\n}\\n\",\"keccak256\":\"0x08bda450d4dc1d17147fd29810234d35e2c437f1a99be733cfa7ee516db08a48\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/ENSResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract ENSResolver {\\n  function addr(bytes32 node) public view virtual returns (address);\\n}\\n\",\"keccak256\":\"0x606bda5f3fa27be4cf04f6636dda443b7787b56e87ade988fca2e51d2147613d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"contracts/TruflationTester.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\nimport '@chainlink/contracts/src/v0.8/ChainlinkClient.sol';\\nimport '@chainlink/contracts/src/v0.8/ConfirmedOwner.sol';\\n\\ncontract TruflationTester is ChainlinkClient, ConfirmedOwner {\\n    using Chainlink for Chainlink.Request;\\n\\n    address public oracleId;\\n    string public jobId;\\n    uint256 public fee;\\n\\n    string public yoyInflation;\\n    int256 public inflationWei;\\n    uint256 public lastTimeStamp; // in seconds\\n\\n    // Please refer to\\n    // https://github.com/truflation/quickstart/blob/main/network.md\\n    // for oracle address. job id, and fee for a given network\\n\\n    // use this for Goerli (chain: 5)\\n    constructor(\\n        address link_, // 0x326C977E6efc84E512bB9C30f76E30c160eD06FB\\n        address oracleId_, // 0xcf72083697aB8A45905870C387dC93f380f2557b\\n        string memory jobId_, // 8b459447262a4ccf8863962e073576d9\\n        uint256 fee_ // 0,01 LINK\\n    ) ConfirmedOwner(msg.sender) {\\n        setChainlinkToken(link_);\\n\\n        oracleId = oracleId_;\\n        jobId = jobId_;\\n        fee = fee_;\\n    }\\n\\n    function requestYoyInflation() public returns (bytes32 requestId) {\\n        Chainlink.Request memory req = buildChainlinkRequest(\\n            bytes32(bytes(jobId)),\\n            address(this),\\n            this.fulfillYoyInflation.selector\\n        );\\n        req.add('service', 'truflation/current');\\n        req.add('keypath', 'yearOverYearInflation');\\n        req.add('abi', 'json');\\n        return sendChainlinkRequestTo(oracleId, req, fee);\\n    }\\n\\n    function transferAndRequestYoyInflation() public returns (bytes32 requestId) {\\n        require(\\n            LinkTokenInterface(getChainlinkToken()).transferFrom(msg.sender, address(this), fee),\\n            'transfer failed'\\n        );\\n\\n        Chainlink.Request memory req = buildChainlinkRequest(\\n            bytes32(bytes(jobId)),\\n            address(this),\\n            this.fulfillYoyInflation.selector\\n        );\\n        req.add('service', 'truflation/current');\\n        req.add('keypath', 'yearOverYearInflation');\\n        req.add('abi', 'json');\\n        req.add('refundTo', Strings.toHexString(uint160(msg.sender), 20));\\n\\n        return sendChainlinkRequestTo(oracleId, req, fee);\\n    }\\n\\n    function fulfillYoyInflation(bytes32 _requestId, bytes memory _inflation)\\n        public\\n        recordChainlinkFulfillment(_requestId)\\n    {\\n        yoyInflation = string(_inflation);\\n        lastTimeStamp = block.timestamp;\\n    }\\n\\n    function changeOracle(address _oracle) public onlyOwner {\\n        oracleId = _oracle;\\n    }\\n\\n    function changeJobId(string memory _jobId) public onlyOwner {\\n        jobId = _jobId;\\n    }\\n\\n    function getChainlinkToken() public view returns (address) {\\n        return chainlinkTokenAddress();\\n    }\\n\\n    function withdrawLink() public onlyOwner {\\n        LinkTokenInterface link = LinkTokenInterface(chainlinkTokenAddress());\\n        require(link.transfer(msg.sender, link.balanceOf(address(this))), 'Unable to transfer');\\n    }\\n\\n    // The following are for retrieving inflation in terms of wei\\n    // This is useful in situations where you want to do numerical\\n    // processing of values within the smart contract\\n\\n    // This will require a int256 rather than a uint256 as inflation\\n    // can be negative\\n    function transferAndRequestInflationWei() public returns (bytes32 requestId) {\\n        Chainlink.Request memory req = buildChainlinkRequest(\\n            bytes32(bytes(jobId)),\\n            address(this),\\n            this.fulfillInflationWei.selector\\n        );\\n        req.add('service', 'truflation/current');\\n        req.add('keypath', 'yearOverYearInflation');\\n        req.add('abi', 'int256');\\n        req.add('multiplier', '1000000000000000000'); // 10**18\\n        return sendChainlinkRequestTo(oracleId, req, fee);\\n    }\\n\\n    function requestInflationWei() public returns (bytes32 requestId) {\\n        require(\\n            LinkTokenInterface(getChainlinkToken()).transferFrom(msg.sender, address(this), fee),\\n            'transfer failed'\\n        );\\n\\n        Chainlink.Request memory req = buildChainlinkRequest(\\n            bytes32(bytes(jobId)),\\n            address(this),\\n            this.fulfillInflationWei.selector\\n        );\\n\\n        req.add('service', 'truflation/current');\\n        req.add('keypath', 'yearOverYearInflation');\\n        req.add('abi', 'int256');\\n        req.add('multiplier', '1000000000000000000'); // 10**18\\n        req.add('refundTo', Strings.toHexString(uint160(msg.sender), 20));\\n\\n        return sendChainlinkRequestTo(oracleId, req, fee);\\n    }\\n\\n    function fulfillInflationWei(bytes32 _requestId, bytes memory _inflation)\\n        public\\n        recordChainlinkFulfillment(_requestId)\\n    {\\n        inflationWei = toInt256(_inflation);\\n        lastTimeStamp = block.timestamp;\\n    }\\n\\n    function toInt256(bytes memory _bytes) internal pure returns (int256 value) {\\n        assembly {\\n            value := mload(add(_bytes, 0x20))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x595689a0963c19d475251096eed66e9b7af169db65ee5484769fb8cbe78d48b7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260016004553480156200001657600080fd5b5060405162003e9638038062003e9683398181016040528101906200003c919062000559565b338060008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603620000b1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000a8906200064b565b60405180910390fd5b81600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161462000139576200013881620001b160201b60201c565b5b5050506200014d84620002e260201b60201c565b82600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600990816200019f9190620008ae565b5080600a819055505050505062000a07565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160362000222576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200021990620009e5565b60405180910390fd5b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000367826200033a565b9050919050565b62000379816200035a565b81146200038557600080fd5b50565b60008151905062000399816200036e565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620003f482620003a9565b810181811067ffffffffffffffff82111715620004165762000415620003ba565b5b80604052505050565b60006200042b62000326565b9050620004398282620003e9565b919050565b600067ffffffffffffffff8211156200045c576200045b620003ba565b5b6200046782620003a9565b9050602081019050919050565b60005b838110156200049457808201518184015260208101905062000477565b60008484015250505050565b6000620004b7620004b1846200043e565b6200041f565b905082815260208101848484011115620004d657620004d5620003a4565b5b620004e384828562000474565b509392505050565b600082601f8301126200050357620005026200039f565b5b815162000515848260208601620004a0565b91505092915050565b6000819050919050565b62000533816200051e565b81146200053f57600080fd5b50565b600081519050620005538162000528565b92915050565b6000806000806080858703121562000576576200057562000330565b5b6000620005868782880162000388565b9450506020620005998782880162000388565b935050604085015167ffffffffffffffff811115620005bd57620005bc62000335565b5b620005cb87828801620004eb565b9250506060620005de8782880162000542565b91505092959194509250565b600082825260208201905092915050565b7f43616e6e6f7420736574206f776e657220746f207a65726f0000000000000000600082015250565b600062000633601883620005ea565b91506200064082620005fb565b602082019050919050565b60006020820190508181036000830152620006668162000624565b9050919050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620006c057607f821691505b602082108103620006d657620006d562000678565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620007407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000701565b6200074c868362000701565b95508019841693508086168417925050509392505050565b6000819050919050565b60006200078f6200078962000783846200051e565b62000764565b6200051e565b9050919050565b6000819050919050565b620007ab836200076e565b620007c3620007ba8262000796565b8484546200070e565b825550505050565b600090565b620007da620007cb565b620007e7818484620007a0565b505050565b5b818110156200080f5762000803600082620007d0565b600181019050620007ed565b5050565b601f8211156200085e576200082881620006dc565b6200083384620006f1565b8101602085101562000843578190505b6200085b6200085285620006f1565b830182620007ec565b50505b505050565b600082821c905092915050565b6000620008836000198460080262000863565b1980831691505092915050565b60006200089e838362000870565b9150826002028217905092915050565b620008b9826200066d565b67ffffffffffffffff811115620008d557620008d4620003ba565b5b620008e18254620006a7565b620008ee82828562000813565b600060209050601f83116001811462000926576000841562000911578287015190505b6200091d858262000890565b8655506200098d565b601f1984166200093686620006dc565b60005b82811015620009605784890151825560018201915060208501945060208101905062000939565b868310156200098057848901516200097c601f89168262000870565b8355505b6001600288020188555050505b505050505050565b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b6000620009cd601783620005ea565b9150620009da8262000995565b602082019050919050565b6000602082019050818103600083015262000a0081620009be565b9050919050565b61347f8062000a176000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c80638da5cb5b116100ad578063bb694f1611610071578063bb694f161461029c578063c2939d97146102b8578063ddca3f43146102d6578063e109f6d0146102f4578063f2fde38b1461031257610121565b80638da5cb5b1461021c5780638dc654a21461023a5780639063e21614610244578063a0050f5914610260578063af5d945b1461027e57610121565b80633f3b3b27116100f45780633f3b3b271461019c57806347c421b5146101ba57806372582c8d146101d657806379ba5097146101f45780638abd3057146101fe57610121565b8063164366e014610126578063165d35e1146101425780632121778d1461016057806321a3d9521461017e575b600080fd5b610140600480360381019061013b9190612356565b61032e565b005b61014a61044e565b60405161015791906123f3565b60405180910390f35b61016861045d565b60405161017591906123f3565b60405180910390f35b610186610483565b604051610193919061241d565b60405180910390f35b6101a4610789565b6040516101b19190612451565b60405180910390f35b6101d460048036038101906101cf9190612498565b61078f565b005b6101de6107db565b6040516101eb919061241d565b60405180910390f35b6101fc6109ae565b005b610206610b45565b604051610213919061241d565b60405180910390f35b610224610eca565b60405161023191906123f3565b60405180910390f35b610242610ef4565b005b61025e60048036038101906102599190612566565b611041565b005b61026861105c565b604051610275919061241d565b60405180910390f35b6102866112ae565b604051610293919061262e565b60405180910390f35b6102b660048036038101906102b19190612356565b61133c565b005b6102c061145d565b6040516102cd919061262e565b60405180910390f35b6102de6114eb565b6040516102eb9190612451565b60405180910390f35b6102fc6114f1565b6040516103099190612669565b60405180910390f35b61032c60048036038101906103279190612498565b6114f7565b005b816005600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c7906126f6565b60405180910390fd5b6005600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055807f7cc135e0cebb02c3480ae5d74d377283180a2601f8f644edf7987b009316c63a60405160405180910390a261043c8261150b565b600c8190555042600d81905550505050565b6000610458611519565b905090565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600061048d61044e565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd3330600a546040518463ffffffff1660e01b81526004016104cb93929190612716565b6020604051808303816000875af11580156104ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050e9190612785565b61054d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610544906127fe565b60405180910390fd5b600061056b600961055d906128fa565b3063bb694f1660e01b611543565b90506105ec6040518060400160405280600781526020017f73657276696365000000000000000000000000000000000000000000000000008152506040518060400160405280601281526020017f747275666c6174696f6e2f63757272656e740000000000000000000000000000815250836115749092919063ffffffff16565b61066b6040518060400160405280600781526020017f6b657970617468000000000000000000000000000000000000000000000000008152506040518060400160405280601581526020017f796561724f76657259656172496e666c6174696f6e0000000000000000000000815250836115749092919063ffffffff16565b6106ea6040518060400160405280600381526020017f61626900000000000000000000000000000000000000000000000000000000008152506040518060400160405280600481526020017f6a736f6e00000000000000000000000000000000000000000000000000000000815250836115749092919063ffffffff16565b6107546040518060400160405280600881526020017f726566756e64546f0000000000000000000000000000000000000000000000008152506107443373ffffffffffffffffffffffffffffffffffffffff1660146115a7565b836115749092919063ffffffff16565b610783600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682600a546117e3565b91505090565b600d5481565b6107976118af565b80600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000806107fa60096107ec906128fa565b3063bb694f1660e01b611543565b905061087b6040518060400160405280600781526020017f73657276696365000000000000000000000000000000000000000000000000008152506040518060400160405280601281526020017f747275666c6174696f6e2f63757272656e740000000000000000000000000000815250836115749092919063ffffffff16565b6108fa6040518060400160405280600781526020017f6b657970617468000000000000000000000000000000000000000000000000008152506040518060400160405280601581526020017f796561724f76657259656172496e666c6174696f6e0000000000000000000000815250836115749092919063ffffffff16565b6109796040518060400160405280600381526020017f61626900000000000000000000000000000000000000000000000000000000008152506040518060400160405280600481526020017f6a736f6e00000000000000000000000000000000000000000000000000000000815250836115749092919063ffffffff16565b6109a8600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682600a546117e3565b91505090565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a3e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a35906129b7565b60405180910390fd5b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905033600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b6000610b4f61044e565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd3330600a546040518463ffffffff1660e01b8152600401610b8d93929190612716565b6020604051808303816000875af1158015610bac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd09190612785565b610c0f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c06906127fe565b60405180910390fd5b6000610c2d6009610c1f906128fa565b3063164366e060e01b611543565b9050610cae6040518060400160405280600781526020017f73657276696365000000000000000000000000000000000000000000000000008152506040518060400160405280601281526020017f747275666c6174696f6e2f63757272656e740000000000000000000000000000815250836115749092919063ffffffff16565b610d2d6040518060400160405280600781526020017f6b657970617468000000000000000000000000000000000000000000000000008152506040518060400160405280601581526020017f796561724f76657259656172496e666c6174696f6e0000000000000000000000815250836115749092919063ffffffff16565b610dac6040518060400160405280600381526020017f61626900000000000000000000000000000000000000000000000000000000008152506040518060400160405280600681526020017f696e743235360000000000000000000000000000000000000000000000000000815250836115749092919063ffffffff16565b610e2b6040518060400160405280600a81526020017f6d756c7469706c696572000000000000000000000000000000000000000000008152506040518060400160405280601381526020017f3130303030303030303030303030303030303000000000000000000000000000815250836115749092919063ffffffff16565b610e956040518060400160405280600881526020017f726566756e64546f000000000000000000000000000000000000000000000000815250610e853373ffffffffffffffffffffffffffffffffffffffff1660146115a7565b836115749092919063ffffffff16565b610ec4600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682600a546117e3565b91505090565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610efc6118af565b6000610f06611519565b90508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb338373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610f5e91906123f3565b602060405180830381865afa158015610f7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f9f9190612a03565b6040518363ffffffff1660e01b8152600401610fbc929190612a30565b6020604051808303816000875af1158015610fdb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fff9190612785565b61103e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161103590612aa5565b60405180910390fd5b50565b6110496118af565b80600990816110589190612c64565b5050565b60008061107b600961106d906128fa565b3063164366e060e01b611543565b90506110fc6040518060400160405280600781526020017f73657276696365000000000000000000000000000000000000000000000000008152506040518060400160405280601281526020017f747275666c6174696f6e2f63757272656e740000000000000000000000000000815250836115749092919063ffffffff16565b61117b6040518060400160405280600781526020017f6b657970617468000000000000000000000000000000000000000000000000008152506040518060400160405280601581526020017f796561724f76657259656172496e666c6174696f6e0000000000000000000000815250836115749092919063ffffffff16565b6111fa6040518060400160405280600381526020017f61626900000000000000000000000000000000000000000000000000000000008152506040518060400160405280600681526020017f696e743235360000000000000000000000000000000000000000000000000000815250836115749092919063ffffffff16565b6112796040518060400160405280600a81526020017f6d756c7469706c696572000000000000000000000000000000000000000000008152506040518060400160405280601381526020017f3130303030303030303030303030303030303000000000000000000000000000815250836115749092919063ffffffff16565b6112a8600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682600a546117e3565b91505090565b600b80546112bb9061284d565b80601f01602080910402602001604051908101604052809291908181526020018280546112e79061284d565b80156113345780601f1061130957610100808354040283529160200191611334565b820191906000526020600020905b81548152906001019060200180831161131757829003601f168201915b505050505081565b816005600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146113de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113d5906126f6565b60405180910390fd5b6005600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055807f7cc135e0cebb02c3480ae5d74d377283180a2601f8f644edf7987b009316c63a60405160405180910390a281600b90816114509190612c64565b5042600d81905550505050565b6009805461146a9061284d565b80601f01602080910402602001604051908101604052809291908181526020018280546114969061284d565b80156114e35780601f106114b8576101008083540402835291602001916114e3565b820191906000526020600020905b8154815290600101906020018083116114c657829003601f168201915b505050505081565b600a5481565b600c5481565b6114ff6118af565b61150881611941565b50565b600060208201519050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61154b61213f565b61155361213f565b61156a85858584611a6f909392919063ffffffff16565b9150509392505050565b61158b828460800151611b1f90919063ffffffff16565b6115a2818460800151611b1f90919063ffffffff16565b505050565b6060600060028360026115ba9190612d65565b6115c49190612da7565b67ffffffffffffffff8111156115dd576115dc61222b565b5b6040519080825280601f01601f19166020018201604052801561160f5781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061164757611646612ddb565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106116ab576116aa612ddb565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026116eb9190612d65565b6116f59190612da7565b90505b6001811115611795577f3031323334353637383961626364656600000000000000000000000000000000600f86166010811061173757611736612ddb565b5b1a60f81b82828151811061174e5761174d612ddb565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c94508061178e90612e0a565b90506116f8565b50600084146117d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117d090612e7f565b60405180910390fd5b8091505092915050565b60008060045490506001816117f89190612da7565b6004819055506000634042994660e01b60008087600001513089604001518760018c6080015160000151604051602401611839989796959493929190612f2f565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506118a486838684611b44565b925050509392505050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461193f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161193690613000565b60405180910390fd5b565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036119af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119a69061306c565b60405180910390fd5b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b611a7761213f565b611a878560800151610100611cd9565b508385600001818152505082856020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508185604001907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681525050849050949350505050565b611b2c8260038351611d43565b611b3f8183611ec890919063ffffffff16565b505050565b60003084604051602001611b5992919061313b565b604051602081830303815290604052805190602001209050846005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550807fb5e6e01e79f91267dc17b4e6314d5d4d03593d2ceee0fbb452b750bd70ea5af960405160405180910390a2600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634000aea08685856040518463ffffffff1660e01b8152600401611c4f93929190613167565b6020604051808303816000875af1158015611c6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c929190612785565b611cd1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cc890613217565b60405180910390fd5b949350505050565b611ce16121ac565b6000602083611cf09190613266565b14611d1c57602082611d029190613266565b6020611d0e9190613297565b82611d199190612da7565b91505b81836020018181525050604051808452600081528281016020016040525082905092915050565b60178167ffffffffffffffff1611611d7a57611d748160058460ff16901b60ff161784611eea90919063ffffffff16565b50611ec3565b60ff8167ffffffffffffffff1611611dd057611da9601860058460ff16901b1784611eea90919063ffffffff16565b50611dca8167ffffffffffffffff16600185611f0a9092919063ffffffff16565b50611ec2565b61ffff8167ffffffffffffffff1611611e2757611e00601960058460ff16901b1784611eea90919063ffffffff16565b50611e218167ffffffffffffffff16600285611f0a9092919063ffffffff16565b50611ec1565b63ffffffff8167ffffffffffffffff1611611e8057611e59601a60058460ff16901b1784611eea90919063ffffffff16565b50611e7a8167ffffffffffffffff16600485611f0a9092919063ffffffff16565b50611ec0565b611e9d601b60058460ff16901b1784611eea90919063ffffffff16565b50611ebe8167ffffffffffffffff16600885611f0a9092919063ffffffff16565b505b5b5b5b505050565b611ed06121ac565b611ee283846000015151848551611f2c565b905092915050565b611ef26121ac565b611f02838460000151518461201b565b905092915050565b611f126121ac565b611f23848560000151518585612071565b90509392505050565b611f346121ac565b8251821115611f4257600080fd5b84602001518285611f539190612da7565b1115611f8857611f87856002611f7888602001518887611f739190612da7565b6120ff565b611f829190612d65565b61211b565b5b600080865180518760208301019350808887011115611fa75787860182525b60208701925050505b60208410611fee5780518252602082611fc99190612da7565b9150602081611fd89190612da7565b9050602084611fe79190613297565b9350611fb0565b60006001856020036101000a03905080198251168184511681811785525050508692505050949350505050565b6120236121ac565b836020015183106120495761204884600286602001516120439190612d65565b61211b565b5b83518051602085830101848153818603612064576001820183525b5050508390509392505050565b6120796121ac565b8460200151848361208a9190612da7565b11156120b2576120b185600286856120a29190612da7565b6120ac9190612d65565b61211b565b5b60006001836101006120c491906133fe565b6120ce9190613297565b905085518386820101858319825116178152815185880111156120f15784870182525b505085915050949350505050565b60008183111561211157829050612115565b8190505b92915050565b60008260000151905061212e8383611cd9565b506121398382611ec8565b50505050565b6040518060a0016040528060008019168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001600081526020016121a66121ac565b81525090565b604051806040016040528060608152602001600081525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6121ed816121da565b81146121f857600080fd5b50565b60008135905061220a816121e4565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6122638261221a565b810181811067ffffffffffffffff821117156122825761228161222b565b5b80604052505050565b60006122956121c6565b90506122a1828261225a565b919050565b600067ffffffffffffffff8211156122c1576122c061222b565b5b6122ca8261221a565b9050602081019050919050565b82818337600083830152505050565b60006122f96122f4846122a6565b61228b565b90508281526020810184848401111561231557612314612215565b5b6123208482856122d7565b509392505050565b600082601f83011261233d5761233c612210565b5b813561234d8482602086016122e6565b91505092915050565b6000806040838503121561236d5761236c6121d0565b5b600061237b858286016121fb565b925050602083013567ffffffffffffffff81111561239c5761239b6121d5565b5b6123a885828601612328565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006123dd826123b2565b9050919050565b6123ed816123d2565b82525050565b600060208201905061240860008301846123e4565b92915050565b612417816121da565b82525050565b6000602082019050612432600083018461240e565b92915050565b6000819050919050565b61244b81612438565b82525050565b60006020820190506124666000830184612442565b92915050565b612475816123d2565b811461248057600080fd5b50565b6000813590506124928161246c565b92915050565b6000602082840312156124ae576124ad6121d0565b5b60006124bc84828501612483565b91505092915050565b600067ffffffffffffffff8211156124e0576124df61222b565b5b6124e98261221a565b9050602081019050919050565b6000612509612504846124c5565b61228b565b90508281526020810184848401111561252557612524612215565b5b6125308482856122d7565b509392505050565b600082601f83011261254d5761254c612210565b5b813561255d8482602086016124f6565b91505092915050565b60006020828403121561257c5761257b6121d0565b5b600082013567ffffffffffffffff81111561259a576125996121d5565b5b6125a684828501612538565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156125e95780820151818401526020810190506125ce565b60008484015250505050565b6000612600826125af565b61260a81856125ba565b935061261a8185602086016125cb565b6126238161221a565b840191505092915050565b6000602082019050818103600083015261264881846125f5565b905092915050565b6000819050919050565b61266381612650565b82525050565b600060208201905061267e600083018461265a565b92915050565b7f536f75726365206d75737420626520746865206f7261636c65206f662074686560008201527f2072657175657374000000000000000000000000000000000000000000000000602082015250565b60006126e06028836125ba565b91506126eb82612684565b604082019050919050565b6000602082019050818103600083015261270f816126d3565b9050919050565b600060608201905061272b60008301866123e4565b61273860208301856123e4565b6127456040830184612442565b949350505050565b60008115159050919050565b6127628161274d565b811461276d57600080fd5b50565b60008151905061277f81612759565b92915050565b60006020828403121561279b5761279a6121d0565b5b60006127a984828501612770565b91505092915050565b7f7472616e73666572206661696c65640000000000000000000000000000000000600082015250565b60006127e8600f836125ba565b91506127f3826127b2565b602082019050919050565b60006020820190508181036000830152612817816127db565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061286557607f821691505b6020821081036128785761287761281e565b5b50919050565b60008154905061288d8161284d565b9050919050565b60008190508160005260206000209050919050565b60008160001c9050919050565b6000819050919050565b60006128d36128ce836128a9565b6128b6565b9050919050565b60006128e682546128c0565b9050919050565b600082821b905092915050565b60006129058261287e565b82601f82111561291b5761291884612894565b90505b612924816128da565b925060208210156129645761295f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff836020036008026128ed565b831692505b5050919050565b7f4d7573742062652070726f706f736564206f776e657200000000000000000000600082015250565b60006129a16016836125ba565b91506129ac8261296b565b602082019050919050565b600060208201905081810360008301526129d081612994565b9050919050565b6129e081612438565b81146129eb57600080fd5b50565b6000815190506129fd816129d7565b92915050565b600060208284031215612a1957612a186121d0565b5b6000612a27848285016129ee565b91505092915050565b6000604082019050612a4560008301856123e4565b612a526020830184612442565b9392505050565b7f556e61626c6520746f207472616e736665720000000000000000000000000000600082015250565b6000612a8f6012836125ba565b9150612a9a82612a59565b602082019050919050565b60006020820190508181036000830152612abe81612a82565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600060088302612b1a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826128ed565b612b2486836128ed565b95508019841693508086168417925050509392505050565b6000819050919050565b6000612b61612b5c612b5784612438565b612b3c565b612438565b9050919050565b6000819050919050565b612b7b83612b46565b612b8f612b8782612b68565b848454612aea565b825550505050565b600090565b612ba4612b97565b612baf818484612b72565b505050565b5b81811015612bd357612bc8600082612b9c565b600181019050612bb5565b5050565b601f821115612c1857612be981612ac5565b612bf284612ada565b81016020851015612c01578190505b612c15612c0d85612ada565b830182612bb4565b50505b505050565b600082821c905092915050565b6000612c3b60001984600802612c1d565b1980831691505092915050565b6000612c548383612c2a565b9150826002028217905092915050565b612c6d826125af565b67ffffffffffffffff811115612c8657612c8561222b565b5b612c90825461284d565b612c9b828285612bd7565b600060209050601f831160018114612cce5760008415612cbc578287015190505b612cc68582612c48565b865550612d2e565b601f198416612cdc86612ac5565b60005b82811015612d0457848901518255600182019150602085019450602081019050612cdf565b86831015612d215784890151612d1d601f891682612c2a565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612d7082612438565b9150612d7b83612438565b9250828202612d8981612438565b91508282048414831517612da057612d9f612d36565b5b5092915050565b6000612db282612438565b9150612dbd83612438565b9250828201905080821115612dd557612dd4612d36565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000612e1582612438565b915060008203612e2857612e27612d36565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b6000612e696020836125ba565b9150612e7482612e33565b602082019050919050565b60006020820190508181036000830152612e9881612e5c565b9050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612ed481612e9f565b82525050565b600081519050919050565b600082825260208201905092915050565b6000612f0182612eda565b612f0b8185612ee5565b9350612f1b8185602086016125cb565b612f248161221a565b840191505092915050565b600061010082019050612f45600083018b6123e4565b612f52602083018a612442565b612f5f604083018961240e565b612f6c60608301886123e4565b612f796080830187612ecb565b612f8660a0830186612442565b612f9360c0830185612442565b81810360e0830152612fa58184612ef6565b90509998505050505050505050565b7f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000600082015250565b6000612fea6016836125ba565b9150612ff582612fb4565b602082019050919050565b6000602082019050818103600083015261301981612fdd565b9050919050565b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b60006130566017836125ba565b915061306182613020565b602082019050919050565b6000602082019050818103600083015261308581613049565b9050919050565b60006130a76130a261309d846123b2565b612b3c565b6123b2565b9050919050565b60006130b98261308c565b9050919050565b60006130cb826130ae565b9050919050565b60008160601b9050919050565b60006130ea826130d2565b9050919050565b60006130fc826130df565b9050919050565b61311461310f826130c0565b6130f1565b82525050565b6000819050919050565b61313561313082612438565b61311a565b82525050565b60006131478285613103565b6014820191506131578284613124565b6020820191508190509392505050565b600060608201905061317c60008301866123e4565b6131896020830185612442565b818103604083015261319b8184612ef6565b9050949350505050565b7f756e61626c6520746f207472616e73666572416e6443616c6c20746f206f726160008201527f636c650000000000000000000000000000000000000000000000000000000000602082015250565b60006132016023836125ba565b915061320c826131a5565b604082019050919050565b60006020820190508181036000830152613230816131f4565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061327182612438565b915061327c83612438565b92508261328c5761328b613237565b5b828206905092915050565b60006132a282612438565b91506132ad83612438565b92508282039050818111156132c5576132c4612d36565b5b92915050565b60008160011c9050919050565b6000808291508390505b6001851115613322578086048111156132fe576132fd612d36565b5b600185161561330d5780820291505b808102905061331b856132cb565b94506132e2565b94509492505050565b60008261333b57600190506133f7565b8161334957600090506133f7565b816001811461335f576002811461336957613398565b60019150506133f7565b60ff84111561337b5761337a612d36565b5b8360020a91508482111561339257613391612d36565b5b506133f7565b5060208310610133831016604e8410600b84101617156133cd5782820a9050838111156133c8576133c7612d36565b5b6133f7565b6133da84848460016132d8565b925090508184048111156133f1576133f0612d36565b5b81810290505b9392505050565b600061340982612438565b915061341483612438565b92506134417fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848461332b565b90509291505056fea26469706673582212207cde20ac33467737d5c759d1cfd2873776e4b5e91b7c3406f825e93d9dbc96ce64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101215760003560e01c80638da5cb5b116100ad578063bb694f1611610071578063bb694f161461029c578063c2939d97146102b8578063ddca3f43146102d6578063e109f6d0146102f4578063f2fde38b1461031257610121565b80638da5cb5b1461021c5780638dc654a21461023a5780639063e21614610244578063a0050f5914610260578063af5d945b1461027e57610121565b80633f3b3b27116100f45780633f3b3b271461019c57806347c421b5146101ba57806372582c8d146101d657806379ba5097146101f45780638abd3057146101fe57610121565b8063164366e014610126578063165d35e1146101425780632121778d1461016057806321a3d9521461017e575b600080fd5b610140600480360381019061013b9190612356565b61032e565b005b61014a61044e565b60405161015791906123f3565b60405180910390f35b61016861045d565b60405161017591906123f3565b60405180910390f35b610186610483565b604051610193919061241d565b60405180910390f35b6101a4610789565b6040516101b19190612451565b60405180910390f35b6101d460048036038101906101cf9190612498565b61078f565b005b6101de6107db565b6040516101eb919061241d565b60405180910390f35b6101fc6109ae565b005b610206610b45565b604051610213919061241d565b60405180910390f35b610224610eca565b60405161023191906123f3565b60405180910390f35b610242610ef4565b005b61025e60048036038101906102599190612566565b611041565b005b61026861105c565b604051610275919061241d565b60405180910390f35b6102866112ae565b604051610293919061262e565b60405180910390f35b6102b660048036038101906102b19190612356565b61133c565b005b6102c061145d565b6040516102cd919061262e565b60405180910390f35b6102de6114eb565b6040516102eb9190612451565b60405180910390f35b6102fc6114f1565b6040516103099190612669565b60405180910390f35b61032c60048036038101906103279190612498565b6114f7565b005b816005600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c7906126f6565b60405180910390fd5b6005600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055807f7cc135e0cebb02c3480ae5d74d377283180a2601f8f644edf7987b009316c63a60405160405180910390a261043c8261150b565b600c8190555042600d81905550505050565b6000610458611519565b905090565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600061048d61044e565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd3330600a546040518463ffffffff1660e01b81526004016104cb93929190612716565b6020604051808303816000875af11580156104ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050e9190612785565b61054d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610544906127fe565b60405180910390fd5b600061056b600961055d906128fa565b3063bb694f1660e01b611543565b90506105ec6040518060400160405280600781526020017f73657276696365000000000000000000000000000000000000000000000000008152506040518060400160405280601281526020017f747275666c6174696f6e2f63757272656e740000000000000000000000000000815250836115749092919063ffffffff16565b61066b6040518060400160405280600781526020017f6b657970617468000000000000000000000000000000000000000000000000008152506040518060400160405280601581526020017f796561724f76657259656172496e666c6174696f6e0000000000000000000000815250836115749092919063ffffffff16565b6106ea6040518060400160405280600381526020017f61626900000000000000000000000000000000000000000000000000000000008152506040518060400160405280600481526020017f6a736f6e00000000000000000000000000000000000000000000000000000000815250836115749092919063ffffffff16565b6107546040518060400160405280600881526020017f726566756e64546f0000000000000000000000000000000000000000000000008152506107443373ffffffffffffffffffffffffffffffffffffffff1660146115a7565b836115749092919063ffffffff16565b610783600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682600a546117e3565b91505090565b600d5481565b6107976118af565b80600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000806107fa60096107ec906128fa565b3063bb694f1660e01b611543565b905061087b6040518060400160405280600781526020017f73657276696365000000000000000000000000000000000000000000000000008152506040518060400160405280601281526020017f747275666c6174696f6e2f63757272656e740000000000000000000000000000815250836115749092919063ffffffff16565b6108fa6040518060400160405280600781526020017f6b657970617468000000000000000000000000000000000000000000000000008152506040518060400160405280601581526020017f796561724f76657259656172496e666c6174696f6e0000000000000000000000815250836115749092919063ffffffff16565b6109796040518060400160405280600381526020017f61626900000000000000000000000000000000000000000000000000000000008152506040518060400160405280600481526020017f6a736f6e00000000000000000000000000000000000000000000000000000000815250836115749092919063ffffffff16565b6109a8600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682600a546117e3565b91505090565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a3e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a35906129b7565b60405180910390fd5b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905033600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b6000610b4f61044e565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd3330600a546040518463ffffffff1660e01b8152600401610b8d93929190612716565b6020604051808303816000875af1158015610bac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd09190612785565b610c0f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c06906127fe565b60405180910390fd5b6000610c2d6009610c1f906128fa565b3063164366e060e01b611543565b9050610cae6040518060400160405280600781526020017f73657276696365000000000000000000000000000000000000000000000000008152506040518060400160405280601281526020017f747275666c6174696f6e2f63757272656e740000000000000000000000000000815250836115749092919063ffffffff16565b610d2d6040518060400160405280600781526020017f6b657970617468000000000000000000000000000000000000000000000000008152506040518060400160405280601581526020017f796561724f76657259656172496e666c6174696f6e0000000000000000000000815250836115749092919063ffffffff16565b610dac6040518060400160405280600381526020017f61626900000000000000000000000000000000000000000000000000000000008152506040518060400160405280600681526020017f696e743235360000000000000000000000000000000000000000000000000000815250836115749092919063ffffffff16565b610e2b6040518060400160405280600a81526020017f6d756c7469706c696572000000000000000000000000000000000000000000008152506040518060400160405280601381526020017f3130303030303030303030303030303030303000000000000000000000000000815250836115749092919063ffffffff16565b610e956040518060400160405280600881526020017f726566756e64546f000000000000000000000000000000000000000000000000815250610e853373ffffffffffffffffffffffffffffffffffffffff1660146115a7565b836115749092919063ffffffff16565b610ec4600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682600a546117e3565b91505090565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610efc6118af565b6000610f06611519565b90508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb338373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610f5e91906123f3565b602060405180830381865afa158015610f7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f9f9190612a03565b6040518363ffffffff1660e01b8152600401610fbc929190612a30565b6020604051808303816000875af1158015610fdb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fff9190612785565b61103e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161103590612aa5565b60405180910390fd5b50565b6110496118af565b80600990816110589190612c64565b5050565b60008061107b600961106d906128fa565b3063164366e060e01b611543565b90506110fc6040518060400160405280600781526020017f73657276696365000000000000000000000000000000000000000000000000008152506040518060400160405280601281526020017f747275666c6174696f6e2f63757272656e740000000000000000000000000000815250836115749092919063ffffffff16565b61117b6040518060400160405280600781526020017f6b657970617468000000000000000000000000000000000000000000000000008152506040518060400160405280601581526020017f796561724f76657259656172496e666c6174696f6e0000000000000000000000815250836115749092919063ffffffff16565b6111fa6040518060400160405280600381526020017f61626900000000000000000000000000000000000000000000000000000000008152506040518060400160405280600681526020017f696e743235360000000000000000000000000000000000000000000000000000815250836115749092919063ffffffff16565b6112796040518060400160405280600a81526020017f6d756c7469706c696572000000000000000000000000000000000000000000008152506040518060400160405280601381526020017f3130303030303030303030303030303030303000000000000000000000000000815250836115749092919063ffffffff16565b6112a8600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682600a546117e3565b91505090565b600b80546112bb9061284d565b80601f01602080910402602001604051908101604052809291908181526020018280546112e79061284d565b80156113345780601f1061130957610100808354040283529160200191611334565b820191906000526020600020905b81548152906001019060200180831161131757829003601f168201915b505050505081565b816005600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146113de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113d5906126f6565b60405180910390fd5b6005600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055807f7cc135e0cebb02c3480ae5d74d377283180a2601f8f644edf7987b009316c63a60405160405180910390a281600b90816114509190612c64565b5042600d81905550505050565b6009805461146a9061284d565b80601f01602080910402602001604051908101604052809291908181526020018280546114969061284d565b80156114e35780601f106114b8576101008083540402835291602001916114e3565b820191906000526020600020905b8154815290600101906020018083116114c657829003601f168201915b505050505081565b600a5481565b600c5481565b6114ff6118af565b61150881611941565b50565b600060208201519050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61154b61213f565b61155361213f565b61156a85858584611a6f909392919063ffffffff16565b9150509392505050565b61158b828460800151611b1f90919063ffffffff16565b6115a2818460800151611b1f90919063ffffffff16565b505050565b6060600060028360026115ba9190612d65565b6115c49190612da7565b67ffffffffffffffff8111156115dd576115dc61222b565b5b6040519080825280601f01601f19166020018201604052801561160f5781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061164757611646612ddb565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106116ab576116aa612ddb565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026116eb9190612d65565b6116f59190612da7565b90505b6001811115611795577f3031323334353637383961626364656600000000000000000000000000000000600f86166010811061173757611736612ddb565b5b1a60f81b82828151811061174e5761174d612ddb565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c94508061178e90612e0a565b90506116f8565b50600084146117d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117d090612e7f565b60405180910390fd5b8091505092915050565b60008060045490506001816117f89190612da7565b6004819055506000634042994660e01b60008087600001513089604001518760018c6080015160000151604051602401611839989796959493929190612f2f565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506118a486838684611b44565b925050509392505050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461193f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161193690613000565b60405180910390fd5b565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036119af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119a69061306c565b60405180910390fd5b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b611a7761213f565b611a878560800151610100611cd9565b508385600001818152505082856020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508185604001907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681525050849050949350505050565b611b2c8260038351611d43565b611b3f8183611ec890919063ffffffff16565b505050565b60003084604051602001611b5992919061313b565b604051602081830303815290604052805190602001209050846005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550807fb5e6e01e79f91267dc17b4e6314d5d4d03593d2ceee0fbb452b750bd70ea5af960405160405180910390a2600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634000aea08685856040518463ffffffff1660e01b8152600401611c4f93929190613167565b6020604051808303816000875af1158015611c6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c929190612785565b611cd1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cc890613217565b60405180910390fd5b949350505050565b611ce16121ac565b6000602083611cf09190613266565b14611d1c57602082611d029190613266565b6020611d0e9190613297565b82611d199190612da7565b91505b81836020018181525050604051808452600081528281016020016040525082905092915050565b60178167ffffffffffffffff1611611d7a57611d748160058460ff16901b60ff161784611eea90919063ffffffff16565b50611ec3565b60ff8167ffffffffffffffff1611611dd057611da9601860058460ff16901b1784611eea90919063ffffffff16565b50611dca8167ffffffffffffffff16600185611f0a9092919063ffffffff16565b50611ec2565b61ffff8167ffffffffffffffff1611611e2757611e00601960058460ff16901b1784611eea90919063ffffffff16565b50611e218167ffffffffffffffff16600285611f0a9092919063ffffffff16565b50611ec1565b63ffffffff8167ffffffffffffffff1611611e8057611e59601a60058460ff16901b1784611eea90919063ffffffff16565b50611e7a8167ffffffffffffffff16600485611f0a9092919063ffffffff16565b50611ec0565b611e9d601b60058460ff16901b1784611eea90919063ffffffff16565b50611ebe8167ffffffffffffffff16600885611f0a9092919063ffffffff16565b505b5b5b5b505050565b611ed06121ac565b611ee283846000015151848551611f2c565b905092915050565b611ef26121ac565b611f02838460000151518461201b565b905092915050565b611f126121ac565b611f23848560000151518585612071565b90509392505050565b611f346121ac565b8251821115611f4257600080fd5b84602001518285611f539190612da7565b1115611f8857611f87856002611f7888602001518887611f739190612da7565b6120ff565b611f829190612d65565b61211b565b5b600080865180518760208301019350808887011115611fa75787860182525b60208701925050505b60208410611fee5780518252602082611fc99190612da7565b9150602081611fd89190612da7565b9050602084611fe79190613297565b9350611fb0565b60006001856020036101000a03905080198251168184511681811785525050508692505050949350505050565b6120236121ac565b836020015183106120495761204884600286602001516120439190612d65565b61211b565b5b83518051602085830101848153818603612064576001820183525b5050508390509392505050565b6120796121ac565b8460200151848361208a9190612da7565b11156120b2576120b185600286856120a29190612da7565b6120ac9190612d65565b61211b565b5b60006001836101006120c491906133fe565b6120ce9190613297565b905085518386820101858319825116178152815185880111156120f15784870182525b505085915050949350505050565b60008183111561211157829050612115565b8190505b92915050565b60008260000151905061212e8383611cd9565b506121398382611ec8565b50505050565b6040518060a0016040528060008019168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001600081526020016121a66121ac565b81525090565b604051806040016040528060608152602001600081525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6121ed816121da565b81146121f857600080fd5b50565b60008135905061220a816121e4565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6122638261221a565b810181811067ffffffffffffffff821117156122825761228161222b565b5b80604052505050565b60006122956121c6565b90506122a1828261225a565b919050565b600067ffffffffffffffff8211156122c1576122c061222b565b5b6122ca8261221a565b9050602081019050919050565b82818337600083830152505050565b60006122f96122f4846122a6565b61228b565b90508281526020810184848401111561231557612314612215565b5b6123208482856122d7565b509392505050565b600082601f83011261233d5761233c612210565b5b813561234d8482602086016122e6565b91505092915050565b6000806040838503121561236d5761236c6121d0565b5b600061237b858286016121fb565b925050602083013567ffffffffffffffff81111561239c5761239b6121d5565b5b6123a885828601612328565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006123dd826123b2565b9050919050565b6123ed816123d2565b82525050565b600060208201905061240860008301846123e4565b92915050565b612417816121da565b82525050565b6000602082019050612432600083018461240e565b92915050565b6000819050919050565b61244b81612438565b82525050565b60006020820190506124666000830184612442565b92915050565b612475816123d2565b811461248057600080fd5b50565b6000813590506124928161246c565b92915050565b6000602082840312156124ae576124ad6121d0565b5b60006124bc84828501612483565b91505092915050565b600067ffffffffffffffff8211156124e0576124df61222b565b5b6124e98261221a565b9050602081019050919050565b6000612509612504846124c5565b61228b565b90508281526020810184848401111561252557612524612215565b5b6125308482856122d7565b509392505050565b600082601f83011261254d5761254c612210565b5b813561255d8482602086016124f6565b91505092915050565b60006020828403121561257c5761257b6121d0565b5b600082013567ffffffffffffffff81111561259a576125996121d5565b5b6125a684828501612538565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156125e95780820151818401526020810190506125ce565b60008484015250505050565b6000612600826125af565b61260a81856125ba565b935061261a8185602086016125cb565b6126238161221a565b840191505092915050565b6000602082019050818103600083015261264881846125f5565b905092915050565b6000819050919050565b61266381612650565b82525050565b600060208201905061267e600083018461265a565b92915050565b7f536f75726365206d75737420626520746865206f7261636c65206f662074686560008201527f2072657175657374000000000000000000000000000000000000000000000000602082015250565b60006126e06028836125ba565b91506126eb82612684565b604082019050919050565b6000602082019050818103600083015261270f816126d3565b9050919050565b600060608201905061272b60008301866123e4565b61273860208301856123e4565b6127456040830184612442565b949350505050565b60008115159050919050565b6127628161274d565b811461276d57600080fd5b50565b60008151905061277f81612759565b92915050565b60006020828403121561279b5761279a6121d0565b5b60006127a984828501612770565b91505092915050565b7f7472616e73666572206661696c65640000000000000000000000000000000000600082015250565b60006127e8600f836125ba565b91506127f3826127b2565b602082019050919050565b60006020820190508181036000830152612817816127db565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061286557607f821691505b6020821081036128785761287761281e565b5b50919050565b60008154905061288d8161284d565b9050919050565b60008190508160005260206000209050919050565b60008160001c9050919050565b6000819050919050565b60006128d36128ce836128a9565b6128b6565b9050919050565b60006128e682546128c0565b9050919050565b600082821b905092915050565b60006129058261287e565b82601f82111561291b5761291884612894565b90505b612924816128da565b925060208210156129645761295f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff836020036008026128ed565b831692505b5050919050565b7f4d7573742062652070726f706f736564206f776e657200000000000000000000600082015250565b60006129a16016836125ba565b91506129ac8261296b565b602082019050919050565b600060208201905081810360008301526129d081612994565b9050919050565b6129e081612438565b81146129eb57600080fd5b50565b6000815190506129fd816129d7565b92915050565b600060208284031215612a1957612a186121d0565b5b6000612a27848285016129ee565b91505092915050565b6000604082019050612a4560008301856123e4565b612a526020830184612442565b9392505050565b7f556e61626c6520746f207472616e736665720000000000000000000000000000600082015250565b6000612a8f6012836125ba565b9150612a9a82612a59565b602082019050919050565b60006020820190508181036000830152612abe81612a82565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600060088302612b1a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826128ed565b612b2486836128ed565b95508019841693508086168417925050509392505050565b6000819050919050565b6000612b61612b5c612b5784612438565b612b3c565b612438565b9050919050565b6000819050919050565b612b7b83612b46565b612b8f612b8782612b68565b848454612aea565b825550505050565b600090565b612ba4612b97565b612baf818484612b72565b505050565b5b81811015612bd357612bc8600082612b9c565b600181019050612bb5565b5050565b601f821115612c1857612be981612ac5565b612bf284612ada565b81016020851015612c01578190505b612c15612c0d85612ada565b830182612bb4565b50505b505050565b600082821c905092915050565b6000612c3b60001984600802612c1d565b1980831691505092915050565b6000612c548383612c2a565b9150826002028217905092915050565b612c6d826125af565b67ffffffffffffffff811115612c8657612c8561222b565b5b612c90825461284d565b612c9b828285612bd7565b600060209050601f831160018114612cce5760008415612cbc578287015190505b612cc68582612c48565b865550612d2e565b601f198416612cdc86612ac5565b60005b82811015612d0457848901518255600182019150602085019450602081019050612cdf565b86831015612d215784890151612d1d601f891682612c2a565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612d7082612438565b9150612d7b83612438565b9250828202612d8981612438565b91508282048414831517612da057612d9f612d36565b5b5092915050565b6000612db282612438565b9150612dbd83612438565b9250828201905080821115612dd557612dd4612d36565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000612e1582612438565b915060008203612e2857612e27612d36565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b6000612e696020836125ba565b9150612e7482612e33565b602082019050919050565b60006020820190508181036000830152612e9881612e5c565b9050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612ed481612e9f565b82525050565b600081519050919050565b600082825260208201905092915050565b6000612f0182612eda565b612f0b8185612ee5565b9350612f1b8185602086016125cb565b612f248161221a565b840191505092915050565b600061010082019050612f45600083018b6123e4565b612f52602083018a612442565b612f5f604083018961240e565b612f6c60608301886123e4565b612f796080830187612ecb565b612f8660a0830186612442565b612f9360c0830185612442565b81810360e0830152612fa58184612ef6565b90509998505050505050505050565b7f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000600082015250565b6000612fea6016836125ba565b9150612ff582612fb4565b602082019050919050565b6000602082019050818103600083015261301981612fdd565b9050919050565b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b60006130566017836125ba565b915061306182613020565b602082019050919050565b6000602082019050818103600083015261308581613049565b9050919050565b60006130a76130a261309d846123b2565b612b3c565b6123b2565b9050919050565b60006130b98261308c565b9050919050565b60006130cb826130ae565b9050919050565b60008160601b9050919050565b60006130ea826130d2565b9050919050565b60006130fc826130df565b9050919050565b61311461310f826130c0565b6130f1565b82525050565b6000819050919050565b61313561313082612438565b61311a565b82525050565b60006131478285613103565b6014820191506131578284613124565b6020820191508190509392505050565b600060608201905061317c60008301866123e4565b6131896020830185612442565b818103604083015261319b8184612ef6565b9050949350505050565b7f756e61626c6520746f207472616e73666572416e6443616c6c20746f206f726160008201527f636c650000000000000000000000000000000000000000000000000000000000602082015250565b60006132016023836125ba565b915061320c826131a5565b604082019050919050565b60006020820190508181036000830152613230816131f4565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061327182612438565b915061327c83612438565b92508261328c5761328b613237565b5b828206905092915050565b60006132a282612438565b91506132ad83612438565b92508282039050818111156132c5576132c4612d36565b5b92915050565b60008160011c9050919050565b6000808291508390505b6001851115613322578086048111156132fe576132fd612d36565b5b600185161561330d5780820291505b808102905061331b856132cb565b94506132e2565b94509492505050565b60008261333b57600190506133f7565b8161334957600090506133f7565b816001811461335f576002811461336957613398565b60019150506133f7565b60ff84111561337b5761337a612d36565b5b8360020a91508482111561339257613391612d36565b5b506133f7565b5060208310610133831016604e8410600b84101617156133cd5782820a9050838111156133c8576133c7612d36565b5b6133f7565b6133da84848460016132d8565b925090508184048111156133f1576133f0612d36565b5b81810290505b9392505050565b600061340982612438565b915061341483612438565b92506134417fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848461332b565b90509291505056fea26469706673582212207cde20ac33467737d5c759d1cfd2873776e4b5e91b7c3406f825e93d9dbc96ce64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptOwnership()": {
        "notice": "Allows an ownership transfer to be completed by the recipient."
      },
      "owner()": {
        "notice": "Get the current owner"
      },
      "transferOwnership(address)": {
        "notice": "Allows an owner to begin transferring ownership to a new address, pending."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 319,
        "contract": "contracts/TruflationTester.sol:TruflationTester",
        "label": "s_ens",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ENSInterface)1329"
      },
      {
        "astId": 321,
        "contract": "contracts/TruflationTester.sol:TruflationTester",
        "label": "s_ensNode",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      },
      {
        "astId": 324,
        "contract": "contracts/TruflationTester.sol:TruflationTester",
        "label": "s_link",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(LinkTokenInterface)1424"
      },
      {
        "astId": 327,
        "contract": "contracts/TruflationTester.sol:TruflationTester",
        "label": "s_oracle",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(OperatorInterface)1504"
      },
      {
        "astId": 330,
        "contract": "contracts/TruflationTester.sol:TruflationTester",
        "label": "s_requestCount",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 334,
        "contract": "contracts/TruflationTester.sol:TruflationTester",
        "label": "s_pendingRequests",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 889,
        "contract": "contracts/TruflationTester.sol:TruflationTester",
        "label": "s_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 891,
        "contract": "contracts/TruflationTester.sol:TruflationTester",
        "label": "s_pendingOwner",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 5095,
        "contract": "contracts/TruflationTester.sol:TruflationTester",
        "label": "oracleId",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 5097,
        "contract": "contracts/TruflationTester.sol:TruflationTester",
        "label": "jobId",
        "offset": 0,
        "slot": "9",
        "type": "t_string_storage"
      },
      {
        "astId": 5099,
        "contract": "contracts/TruflationTester.sol:TruflationTester",
        "label": "fee",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 5101,
        "contract": "contracts/TruflationTester.sol:TruflationTester",
        "label": "yoyInflation",
        "offset": 0,
        "slot": "11",
        "type": "t_string_storage"
      },
      {
        "astId": 5103,
        "contract": "contracts/TruflationTester.sol:TruflationTester",
        "label": "inflationWei",
        "offset": 0,
        "slot": "12",
        "type": "t_int256"
      },
      {
        "astId": 5105,
        "contract": "contracts/TruflationTester.sol:TruflationTester",
        "label": "lastTimeStamp",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ENSInterface)1329": {
        "encoding": "inplace",
        "label": "contract ENSInterface",
        "numberOfBytes": "20"
      },
      "t_contract(LinkTokenInterface)1424": {
        "encoding": "inplace",
        "label": "contract LinkTokenInterface",
        "numberOfBytes": "20"
      },
      "t_contract(OperatorInterface)1504": {
        "encoding": "inplace",
        "label": "contract OperatorInterface",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}